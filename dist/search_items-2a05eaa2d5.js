searchNodes=[{"doc":"","ref":"Noizu.Entity.Protocol.Derive.NoizuStruct.html","title":"Noizu.Entity.Protocol.Derive.NoizuStruct","type":"module"},{"doc":"","ref":"Noizu.Entity.Protocol.Derive.NoizuStruct.html#expand!/3","title":"Noizu.Entity.Protocol.Derive.NoizuStruct.expand!/3","type":"function"},{"doc":"","ref":"Noizu.Entity.Protocol.Derive.NoizuStruct.html#expand_field?/4","title":"Noizu.Entity.Protocol.Derive.NoizuStruct.expand_field?/4","type":"function"},{"doc":"Custom Poison Encoder Implementation, it handles stripping PII, formatting, etc.","ref":"Noizu.Poison.Encoder.html","title":"Noizu.Poison.Encoder","type":"module"},{"doc":"Convert struct into json string.","ref":"Noizu.Poison.Encoder.html#encode/2","title":"Noizu.Poison.Encoder.encode/2","type":"function"},{"doc":"Custom Poison Encoder Implementation, it handles stripping PII, formatting, etc.","ref":"Noizu.Poison.RepoEncoder.html","title":"Noizu.Poison.RepoEncoder","type":"module"},{"doc":"Convert repo into json string.","ref":"Noizu.Poison.RepoEncoder.html#encode/2","title":"Noizu.Poison.RepoEncoder.encode/2","type":"function"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.Derive.NoizuStruct.html","title":"Noizu.RestrictedAccess.Protocol.Derive.NoizuStruct","type":"module"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.Derive.NoizuStruct.html#restricted_create/3","title":"Noizu.RestrictedAccess.Protocol.Derive.NoizuStruct.restricted_create/3","type":"function"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.Derive.NoizuStruct.html#restricted_update/4","title":"Noizu.RestrictedAccess.Protocol.Derive.NoizuStruct.restricted_update/4","type":"function"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.Derive.NoizuStruct.html#restricted_view/3","title":"Noizu.RestrictedAccess.Protocol.Derive.NoizuStruct.restricted_view/3","type":"function"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.Derive.Struct.html","title":"Noizu.RestrictedAccess.Protocol.Derive.Struct","type":"module"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.Derive.Struct.html#restricted_create/3","title":"Noizu.RestrictedAccess.Protocol.Derive.Struct.restricted_create/3","type":"function"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.Derive.Struct.html#restricted_update/4","title":"Noizu.RestrictedAccess.Protocol.Derive.Struct.restricted_update/4","type":"function"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.Derive.Struct.html#restricted_view/3","title":"Noizu.RestrictedAccess.Protocol.Derive.Struct.restricted_view/3","type":"function"},{"doc":"The Noizu.RocksDB module provides functions for interacting with a RocksDB database. Functions resource_ok/1 : Checks if the RocksDB resource handle is valid. get/3 : Retrieves a value from the RocksDB database. delete/4 : Deletes a key-value pair from the RocksDB database. put/4 : Inserts or updates a key-value pair in the RocksDB database.","ref":"Noizu.RocksDB.html","title":"Noizu.RocksDB","type":"module"},{"doc":"Deletes a key-value pair from the RocksDB database. Params handle: The resource handle. key: The key of the pair to delete. value: value of the key (unused) options: A keyword list of options. Returns : The deleted value. : The resource handle is not valid. error: An error that may occur during deletion.","ref":"Noizu.RocksDB.html#delete/4","title":"Noizu.RocksDB.delete/4","type":"function"},{"doc":"Retrieves a value from the RocksDB database. Params handle: The resource handle. key: The key to retrieve the value for. options: A keyword list of options. Returns : The retrieved value. : The resource handle is not valid. error: An error that may occur during value retrieval.","ref":"Noizu.RocksDB.html#get/3","title":"Noizu.RocksDB.get/3","type":"function"},{"doc":"Inserts or updates a key-value pair in the RocksDB database. Params handle: The resource handle. key: The key of the pair to insert/update. value: The value to insert/update. options: A keyword list of options. Returns : The inserted/updated value. : The resource handle is not valid. error: An error that may occur during insertion/updating.","ref":"Noizu.RocksDB.html#put/4","title":"Noizu.RocksDB.put/4","type":"function"},{"doc":"Checks if the RocksDB resource handle is valid. Params handle: The resource handle. Returns : The RocksDB resource if it is valid. : The resource handle is not valid. : An error reason for the failure.","ref":"Noizu.RocksDB.html#resource_ok/1","title":"Noizu.RocksDB.resource_ok/1","type":"function"},{"doc":"The Noizu.RocksDB.Monitor module is a GenServer process for monitoring RocksDB resources. Functions start_link/2 : Starts the RocksDB monitor process.","ref":"Noizu.RocksDB.Monitor.html","title":"Noizu.RocksDB.Monitor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Noizu.RocksDB.Monitor.html#child_spec/1","title":"Noizu.RocksDB.Monitor.child_spec/1","type":"function"},{"doc":"Handles incoming messages for the RocksDB monitor process. Params call: The incoming message. state: The current state of the monitor process. Returns : The monitor process handled the message successfully.","ref":"Noizu.RocksDB.Monitor.html#handle_info/2","title":"Noizu.RocksDB.Monitor.handle_info/2","type":"function"},{"doc":"Initializes the RocksDB monitor process. Params state: The initial state of the monitor process. Returns : The monitor process was initialized successfully. : An error that may occur during initialization.","ref":"Noizu.RocksDB.Monitor.html#init/1","title":"Noizu.RocksDB.Monitor.init/1","type":"function"},{"doc":"Starts the RocksDB monitor process. Params name: The name of the monitor process. settings: The settings for the monitor process. Returns :ok: The monitor process was started successfully. : An error reason for the failure.","ref":"Noizu.RocksDB.Monitor.html#start_link/2","title":"Noizu.RocksDB.Monitor.start_link/2","type":"function"},{"doc":"Terminates the RocksDB monitor process. Params reason: The termination reason. state: The current state of the monitor process. Returns : The monitor process was terminated successfully.","ref":"Noizu.RocksDB.Monitor.html#terminate/2","title":"Noizu.RocksDB.Monitor.terminate/2","type":"function"},{"doc":"The Noizu.RocksDB.Supervisor module is a Supervisor process for managing RocksDB monitors. Functions start_link/1 : Starts the RocksDB Supervisor process.","ref":"Noizu.RocksDB.Supervisor.html","title":"Noizu.RocksDB.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Noizu.RocksDB.Supervisor.html#child_spec/1","title":"Noizu.RocksDB.Supervisor.child_spec/1","type":"function"},{"doc":"Initializes the RocksDB Supervisor process. Params state: The initial state of the Supervisor process. Returns : The Supervisor process was initialized successfully. : An error that may occur during initialization.","ref":"Noizu.RocksDB.Supervisor.html#init/1","title":"Noizu.RocksDB.Supervisor.init/1","type":"function"},{"doc":"Starts the RocksDB Supervisor process. Params children: The child processes. options: A keyword list of options. Returns :ok: The Supervisor process was started successfully. : An error reason for the failure.","ref":"Noizu.RocksDB.Supervisor.html#start_link/1","title":"Noizu.RocksDB.Supervisor.start_link/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Helpers.html","title":"Noizu.AdvancedScaffolding.Helpers","type":"module"},{"doc":"Prepares a list of paths to expand keyed to a root, plus options depth. Example expand-refs= .posts.entity-image.image, .user:5 Internally paths are converted to regex strings + max depth constraints and compared to input in json methods. Regex.match?(~&quot;^image.entity-image.user.*$&quot;, path)","ref":"Noizu.AdvancedScaffolding.Helpers.html#__default_get_context__expand_refs__/4","title":"Noizu.AdvancedScaffolding.Helpers.__default_get_context__expand_refs__/4","type":"function"},{"doc":"Set content-type if not set.","ref":"Noizu.AdvancedScaffolding.Helpers.html#__ensure_resp_content_type__/2","title":"Noizu.AdvancedScaffolding.Helpers.__ensure_resp_content_type__/2","type":"function"},{"doc":"Send API Response.","ref":"Noizu.AdvancedScaffolding.Helpers.html#__send_resp__/4","title":"Noizu.AdvancedScaffolding.Helpers.__send_resp__/4","type":"function"},{"doc":"Update Entity.expand! option depth and path.","ref":"Noizu.AdvancedScaffolding.Helpers.html#__update_expand_options__/2","title":"Noizu.AdvancedScaffolding.Helpers.__update_expand_options__/2","type":"function"},{"doc":"Update Poison Format/Expansion options.","ref":"Noizu.AdvancedScaffolding.Helpers.html#__update_options__/2","title":"Noizu.AdvancedScaffolding.Helpers.__update_options__/2","type":"function"},{"doc":"Update Poison Format/Expansion options.","ref":"Noizu.AdvancedScaffolding.Helpers.html#__update_options__/3","title":"Noizu.AdvancedScaffolding.Helpers.__update_options__/3","type":"function"},{"doc":"Update Poison Format/Expansion options.","ref":"Noizu.AdvancedScaffolding.Helpers.html#__update_options__json_format__/2","title":"Noizu.AdvancedScaffolding.Helpers.__update_options__json_format__/2","type":"function"},{"doc":"Prepare and return api response. Expand refs, strip pii, apply specific json formatting etc. to result set before returning,","ref":"Noizu.AdvancedScaffolding.Helpers.html#api_response/4","title":"Noizu.AdvancedScaffolding.Helpers.api_response/4","type":"function"},{"doc":"Prepare banner string output.","ref":"Noizu.AdvancedScaffolding.Helpers.html#banner_text/4","title":"Noizu.AdvancedScaffolding.Helpers.banner_text/4","type":"function"},{"doc":"Extract concurrency settings from options","ref":"Noizu.AdvancedScaffolding.Helpers.html#expand_concurrency/1","title":"Noizu.AdvancedScaffolding.Helpers.expand_concurrency/1","type":"function"},{"doc":"Should entity be expanded for poison/entity expand.","ref":"Noizu.AdvancedScaffolding.Helpers.html#expand_ref?/1","title":"Noizu.AdvancedScaffolding.Helpers.expand_ref?/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Helpers.html#expand_ref?/3","title":"Noizu.AdvancedScaffolding.Helpers.expand_ref?/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Helpers.html#extract_setting/6","title":"Noizu.AdvancedScaffolding.Helpers.extract_setting/6","type":"function"},{"doc":"injects maps in path if not already populated. @example force_put(%{}, [:a, :b, :c], 1) %{a: %{b: %{c: 1}}}","ref":"Noizu.AdvancedScaffolding.Helpers.html#force_put/3","title":"Noizu.AdvancedScaffolding.Helpers.force_put/3","type":"function"},{"doc":"Convert string json format specifier to atom if exists or default.","ref":"Noizu.AdvancedScaffolding.Helpers.html#format_to_atom/2","title":"Noizu.AdvancedScaffolding.Helpers.format_to_atom/2","type":"function"},{"doc":"get caller's IP address.","ref":"Noizu.AdvancedScaffolding.Helpers.html#get_ip/1","title":"Noizu.AdvancedScaffolding.Helpers.get_ip/1","type":"function"},{"doc":"Return Json Provider.","ref":"Noizu.AdvancedScaffolding.Helpers.html#json_library/0","title":"Noizu.AdvancedScaffolding.Helpers.json_library/0","type":"function"},{"doc":"Return query page (e.g. run next(query) until reaching desired page.","ref":"Noizu.AdvancedScaffolding.Helpers.html#page/2","title":"Noizu.AdvancedScaffolding.Helpers.page/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Helpers.html#request_pagination/3","title":"Noizu.AdvancedScaffolding.Helpers.request_pagination/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Helpers.CustomHelper.html","title":"Noizu.AdvancedScaffolding.Helpers.CustomHelper","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.NmidGenerator.html","title":"Noizu.AdvancedScaffolding.NmidGenerator","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.NmidGenerator.html#bare/1","title":"Noizu.AdvancedScaffolding.NmidGenerator.bare/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.NmidGenerator.html#bare!/1","title":"Noizu.AdvancedScaffolding.NmidGenerator.bare!/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.NmidGenerator.html#bare_node/1","title":"Noizu.AdvancedScaffolding.NmidGenerator.bare_node/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.NmidGenerator.html#bare_node!/1","title":"Noizu.AdvancedScaffolding.NmidGenerator.bare_node!/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.NmidGenerator.html#generate/2","title":"Noizu.AdvancedScaffolding.NmidGenerator.generate/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.NmidGenerator.html#generate!/2","title":"Noizu.AdvancedScaffolding.NmidGenerator.generate!/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.NmidGenerator.html#map_id/3","title":"Noizu.AdvancedScaffolding.NmidGenerator.map_id/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.NmidGenerator.html#set_incr/2","title":"Noizu.AdvancedScaffolding.NmidGenerator.set_incr/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html","title":"Noizu.AdvancedScaffolding.Types","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:entity_identifier/0","title":"Noizu.AdvancedScaffolding.Types.entity_identifier/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:entity_or_ref/0","title":"Noizu.AdvancedScaffolding.Types.entity_or_ref/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:error/0","title":"Noizu.AdvancedScaffolding.Types.error/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:field_query_clause/0","title":"Noizu.AdvancedScaffolding.Types.field_query_clause/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:identifier_type/0","title":"Noizu.AdvancedScaffolding.Types.identifier_type/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:index_clause_type/0","title":"Noizu.AdvancedScaffolding.Types.index_clause_type/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:index_noizu_info_settings/0","title":"Noizu.AdvancedScaffolding.Types.index_noizu_info_settings/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:index_query_clause/0","title":"Noizu.AdvancedScaffolding.Types.index_query_clause/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:nmid_setting/0","title":"Noizu.AdvancedScaffolding.Types.nmid_setting/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:noizu_info_setting/0","title":"Noizu.AdvancedScaffolding.Types.noizu_info_setting/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:noizu_info_setting__erp/0","title":"Noizu.AdvancedScaffolding.Types.noizu_info_setting__erp/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:noizu_info_setting__field/0","title":"Noizu.AdvancedScaffolding.Types.noizu_info_setting__field/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:noizu_info_setting__indexing/0","title":"Noizu.AdvancedScaffolding.Types.noizu_info_setting__indexing/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:noizu_info_setting__json/0","title":"Noizu.AdvancedScaffolding.Types.noizu_info_setting__json/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:noizu_info_setting__permissions/0","title":"Noizu.AdvancedScaffolding.Types.noizu_info_setting__permissions/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:noizu_info_setting__persistence/0","title":"Noizu.AdvancedScaffolding.Types.noizu_info_setting__persistence/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:options/0","title":"Noizu.AdvancedScaffolding.Types.options/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:query_clause/0","title":"Noizu.AdvancedScaffolding.Types.query_clause/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:query_clause_type/0","title":"Noizu.AdvancedScaffolding.Types.query_clause_type/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:query_clauses/0","title":"Noizu.AdvancedScaffolding.Types.query_clauses/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:query_snippet/0","title":"Noizu.AdvancedScaffolding.Types.query_snippet/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:ref/0","title":"Noizu.AdvancedScaffolding.Types.ref/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:search_clauses/0","title":"Noizu.AdvancedScaffolding.Types.search_clauses/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:search_results/0","title":"Noizu.AdvancedScaffolding.Types.search_results/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Types.html#t:sref/0","title":"Noizu.AdvancedScaffolding.Types.sref/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table","type":"module"},{"doc":"Require the needed modules to use the table effectively.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#__using__/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.__using__/1","type":"macro"},{"doc":"Add a copy of the table on the given node with the given mode.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#add_copy/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.add_copy/2","type":"function"},{"doc":"Add the index in the table for the given attribute.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#add_index/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.add_index/1","type":"function"},{"doc":"Read a record based on a slot, see mnesia:dirty_slot .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#at!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.at!/1","type":"function"},{"doc":"The in order keyword list of attributes passed when the table was defined.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#attributes/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.attributes/0","type":"function"},{"doc":"Check if the table is a bag.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#bag?/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.bag?/0","type":"function"},{"doc":"Clear the content of the table.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#clear/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.clear/0","type":"function"},{"doc":"Change the copying mode of the table on the given node, see mnesia:change_table_copy_type . Modes :disk sets :disc_copies mode :disk! sets :disc_only_copies mode :memory sets :ram_copies mode","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#copying/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.copying/2","type":"function"},{"doc":"Get the number of records in the table.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#count/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.count/0","type":"function"},{"doc":"Create the table with the given copying mode and inherent definition.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#create/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.create/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#create!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.create!/1","type":"function"},{"doc":"Return the database the table belongs to.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#database/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.database/0","type":"function"},{"doc":"Delete the record or the given key from the table, see mnesia:delete and mnesia:delete_object .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#delete/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.delete/1","type":"function"},{"doc":"Delete the record or the given key from the table with the given lock, see mnesia:delete and mnesia:delete_object . Locks :write sets a :write lock :write! sets a :sticky_write lock","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#delete/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.delete/2","type":"function"},{"doc":"Delete the record or the given key from the table, see mnesia:dirty_delete and mnesia:dirty_delete_object .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#delete!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.delete!/1","type":"function"},{"doc":"Delete a copy of the table from the given node.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#delete_copy/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.delete_copy/1","type":"function"},{"doc":"Delete the index in the table for the given attribute.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#delete_index/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.delete_index/1","type":"function"},{"doc":"Destroy the table.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#destroy/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.destroy/0","type":"function"},{"doc":"Destroy the table, raising if an error occurs.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#destroy!/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.destroy!/0","type":"function"},{"doc":"Return the first key or record in the table, see mnesia:first . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#first/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.first/2","type":"function"},{"doc":"Return the first key or record in the table, see mnesia:dirty_first . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#first!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.first!/1","type":"function"},{"doc":"Fold the whole table from the left, see mnesia:foldl .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#foldl/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.foldl/2","type":"function"},{"doc":"Fold the whole table from the right, see mnesia:foldr .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#foldr/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.foldr/2","type":"function"},{"doc":"Force load the table.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#force/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.force/0","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#hook_read/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.hook_read/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#hook_read!/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.hook_read!/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#hook_write/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.hook_write/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#hook_write!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.hook_write!/1","type":"function"},{"doc":"Get the name of the id key.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#id/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.id/0","type":"function"},{"doc":"Get information about the table, see mnesia:table_info .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#info/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.info/1","type":"function"},{"doc":"Return the key of the record.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#key/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.key/1","type":"function"},{"doc":"Return all the keys in the table, see mnesia:all_keys .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#keys/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.keys/0","type":"function"},{"doc":"Return all keys in the table, see mnesia:dirty_all_keys .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#keys!/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.keys!/0","type":"function"},{"doc":"Return the last key or record in the table, see mnesia:last . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#last/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.last/2","type":"function"},{"doc":"Return the last key or record in the table, see mnesia:dirty_last . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#last!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.last!/1","type":"function"},{"doc":"Lock the table with the given lock. Locks :write sets a :write lock :write! sets a :sticky_write lock :read sets a :read lock","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#lock/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.lock/1","type":"function"},{"doc":"Change the table majority.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#majority/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.majority/1","type":"function"},{"doc":"Set master nodes for the table, see mnesia:set_master_nodes .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#master_nodes/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.master_nodes/1","type":"function"},{"doc":"Select records in the table using simple don't care values, see mnesia:match_object .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#match/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.match/2","type":"function"},{"doc":"Select records in the table using simple don't care values, see mnesia:dirty_match_object .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#match!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.match!/1","type":"function"},{"doc":"Check if the key is present in the table.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#member?/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.member?/1","type":"function"},{"doc":"Change the access of the table, see mnesia:change_table_access_mode . Modes :both sets read and write mode, it's the default. :read! sets read-only mode.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#mode/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.mode/1","type":"function"},{"doc":"Move a copy of the table from the given node to another given node.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#move_copy/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.move_copy/2","type":"function"},{"doc":"Return the next key or record in the table, see mnesia:next . If you're calling this function from an instance of the table (a record in it), it will get you the next record, if you're calling it directly on the module it will treat the argument as key to start from and return you the next key.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#next/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.next/1","type":"function"},{"doc":"Return the next key or record in the table, see mnesia:dirty_next . If you're calling this function from an instance of the table (a record in it), it will get you the next record, if you're calling it directly on the module it will treat the argument as key to start from and return you the next key.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#next!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.next!/1","type":"function"},{"doc":"The options passed when the table was defined.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#options/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.options/0","type":"function"},{"doc":"Check if the table is an ordered set.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#ordered_set?/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.ordered_set?/0","type":"function"},{"doc":"Return the previous key or record in the table, see mnesia:prev . If you're calling this function from an instance of the table (a record in it), it will get you the previous record, if you're calling it directly on the module it will treat the argument as key to start from and return you the previous key.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#prev/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.prev/1","type":"function"},{"doc":"Return the previous key or record in the table, see mnesia:dirty_prev . If you're calling this function from an instance of the table (a record in it), it will get you the previous record, if you're calling it directly on the module it will treat the argument as key to start from and return you the previous key.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#prev!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.prev!/1","type":"function"},{"doc":"Change the table loading priority.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#priority/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.priority/1","type":"function"},{"doc":"Return properties of the table.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#properties/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.properties/0","type":"function"},{"doc":"Read a record from the table with the given lock, see mnesia:read . Unlike mnesia:read this returns either the record or nil. Locks :write sets a :write lock :write! sets a :sticky_write lock :read sets a :read lock","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#read/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.read/2","type":"function"},{"doc":"Read a record from the table, see mnesia:dirty_read . Unlike mnesia:dirty_read this returns either the record or nil.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#read!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.read!/1","type":"function"},{"doc":"Read records from the table based on a secondary index given as position, see mnesia:index_read .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#read_at/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.read_at/2","type":"function"},{"doc":"Read records from the table based on a secondary index given as position, see mnesia:dirty_index_read .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#read_at!/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.read_at!/2","type":"function"},{"doc":"Select records in the table using a match_spec, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#select/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.select/1","type":"function"},{"doc":"Select records in the given table using a match_spec passing a limit or a lock kind, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#select/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.select/2","type":"function"},{"doc":"Select records in the given table using a match_spec passing a limit and a lock kind, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#select/3","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.select/3","type":"function"},{"doc":"Select records in the table using a match_spec, see mnesia:dirty_select .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#select!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.select!/1","type":"function"},{"doc":"Check if the table is a set.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#set?/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.set?/0","type":"function"},{"doc":"Return an iterator to use with Enum functions.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#stream/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.stream/1","type":"function"},{"doc":"Return an iterator to use with the Enum functions using dirty operations to retrieve information.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#stream!/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.stream!/0","type":"function"},{"doc":"Return the type of the table.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#type/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.type/1","type":"function"},{"doc":"Wait for the table optionally with a timeout.","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#wait/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.wait/1","type":"function"},{"doc":"Select records in the table using an Exquisite query, see Exquisite.match/2 and mnesia:select . Options limit - sets the count of elements to select in every continuation lock - sets the kind of lock to use select - Exquisite selector spec qualified - whether to set a name for the record or not","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#where/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.where/2","type":"macro"},{"doc":"Select records in the table using an Exquisite query, see Exquisite.match/2 and mnesia:dirty_select . Options select - Exquisite selector spec qualified - whether to set a name for the record or not","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#where!/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.where!/2","type":"macro"},{"doc":"Write the record to the table, see mnesia:write . Missing fields tagged as autoincrement will be incremented with the counter if nil .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#write/2","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.write/2","type":"function"},{"doc":"Write the record to the table, see mnesia:dirty_write . Missing fields tagged as autoincrement will be incremented with the counter if nil .","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#write!/1","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.write!/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#t:autoincrement/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.autoincrement/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.html#t:t/0","title":"Noizu.AdvancedScaffolding.Database.EctoIdentifierLookup.Table.t/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table","type":"module"},{"doc":"Require the needed modules to use the table effectively.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#__using__/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.__using__/1","type":"macro"},{"doc":"Add a copy of the table on the given node with the given mode.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#add_copy/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.add_copy/2","type":"function"},{"doc":"Add the index in the table for the given attribute.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#add_index/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.add_index/1","type":"function"},{"doc":"Read a record based on a slot, see mnesia:dirty_slot .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#at!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.at!/1","type":"function"},{"doc":"The in order keyword list of attributes passed when the table was defined.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#attributes/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.attributes/0","type":"function"},{"doc":"Check if the table is a bag.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#bag?/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.bag?/0","type":"function"},{"doc":"Clear the content of the table.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#clear/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.clear/0","type":"function"},{"doc":"Change the copying mode of the table on the given node, see mnesia:change_table_copy_type . Modes :disk sets :disc_copies mode :disk! sets :disc_only_copies mode :memory sets :ram_copies mode","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#copying/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.copying/2","type":"function"},{"doc":"Get the number of records in the table.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#count/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.count/0","type":"function"},{"doc":"Create the table with the given copying mode and inherent definition.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#create/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.create/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#create!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.create!/1","type":"function"},{"doc":"Return the database the table belongs to.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#database/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.database/0","type":"function"},{"doc":"Delete the record or the given key from the table, see mnesia:delete and mnesia:delete_object .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#delete/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.delete/1","type":"function"},{"doc":"Delete the record or the given key from the table with the given lock, see mnesia:delete and mnesia:delete_object . Locks :write sets a :write lock :write! sets a :sticky_write lock","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#delete/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.delete/2","type":"function"},{"doc":"Delete the record or the given key from the table, see mnesia:dirty_delete and mnesia:dirty_delete_object .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#delete!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.delete!/1","type":"function"},{"doc":"Delete a copy of the table from the given node.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#delete_copy/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.delete_copy/1","type":"function"},{"doc":"Delete the index in the table for the given attribute.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#delete_index/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.delete_index/1","type":"function"},{"doc":"Destroy the table.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#destroy/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.destroy/0","type":"function"},{"doc":"Destroy the table, raising if an error occurs.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#destroy!/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.destroy!/0","type":"function"},{"doc":"Return the first key or record in the table, see mnesia:first . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#first/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.first/2","type":"function"},{"doc":"Return the first key or record in the table, see mnesia:dirty_first . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#first!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.first!/1","type":"function"},{"doc":"Fold the whole table from the left, see mnesia:foldl .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#foldl/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.foldl/2","type":"function"},{"doc":"Fold the whole table from the right, see mnesia:foldr .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#foldr/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.foldr/2","type":"function"},{"doc":"Force load the table.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#force/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.force/0","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#hook_read/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.hook_read/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#hook_read!/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.hook_read!/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#hook_write/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.hook_write/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#hook_write!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.hook_write!/1","type":"function"},{"doc":"Get the name of the id key.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#id/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.id/0","type":"function"},{"doc":"Get information about the table, see mnesia:table_info .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#info/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.info/1","type":"function"},{"doc":"Return the key of the record.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#key/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.key/1","type":"function"},{"doc":"Return all the keys in the table, see mnesia:all_keys .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#keys/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.keys/0","type":"function"},{"doc":"Return all keys in the table, see mnesia:dirty_all_keys .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#keys!/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.keys!/0","type":"function"},{"doc":"Return the last key or record in the table, see mnesia:last . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#last/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.last/2","type":"function"},{"doc":"Return the last key or record in the table, see mnesia:dirty_last . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#last!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.last!/1","type":"function"},{"doc":"Lock the table with the given lock. Locks :write sets a :write lock :write! sets a :sticky_write lock :read sets a :read lock","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#lock/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.lock/1","type":"function"},{"doc":"Change the table majority.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#majority/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.majority/1","type":"function"},{"doc":"Set master nodes for the table, see mnesia:set_master_nodes .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#master_nodes/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.master_nodes/1","type":"function"},{"doc":"Select records in the table using simple don't care values, see mnesia:match_object .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#match/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.match/2","type":"function"},{"doc":"Select records in the table using simple don't care values, see mnesia:dirty_match_object .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#match!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.match!/1","type":"function"},{"doc":"Check if the key is present in the table.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#member?/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.member?/1","type":"function"},{"doc":"Change the access of the table, see mnesia:change_table_access_mode . Modes :both sets read and write mode, it's the default. :read! sets read-only mode.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#mode/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.mode/1","type":"function"},{"doc":"Move a copy of the table from the given node to another given node.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#move_copy/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.move_copy/2","type":"function"},{"doc":"Return the next key or record in the table, see mnesia:next . If you're calling this function from an instance of the table (a record in it), it will get you the next record, if you're calling it directly on the module it will treat the argument as key to start from and return you the next key.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#next/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.next/1","type":"function"},{"doc":"Return the next key or record in the table, see mnesia:dirty_next . If you're calling this function from an instance of the table (a record in it), it will get you the next record, if you're calling it directly on the module it will treat the argument as key to start from and return you the next key.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#next!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.next!/1","type":"function"},{"doc":"The options passed when the table was defined.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#options/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.options/0","type":"function"},{"doc":"Check if the table is an ordered set.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#ordered_set?/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.ordered_set?/0","type":"function"},{"doc":"Return the previous key or record in the table, see mnesia:prev . If you're calling this function from an instance of the table (a record in it), it will get you the previous record, if you're calling it directly on the module it will treat the argument as key to start from and return you the previous key.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#prev/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.prev/1","type":"function"},{"doc":"Return the previous key or record in the table, see mnesia:dirty_prev . If you're calling this function from an instance of the table (a record in it), it will get you the previous record, if you're calling it directly on the module it will treat the argument as key to start from and return you the previous key.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#prev!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.prev!/1","type":"function"},{"doc":"Change the table loading priority.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#priority/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.priority/1","type":"function"},{"doc":"Return properties of the table.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#properties/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.properties/0","type":"function"},{"doc":"Read a record from the table with the given lock, see mnesia:read . Unlike mnesia:read this returns either the record or nil. Locks :write sets a :write lock :write! sets a :sticky_write lock :read sets a :read lock","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#read/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.read/2","type":"function"},{"doc":"Read a record from the table, see mnesia:dirty_read . Unlike mnesia:dirty_read this returns either the record or nil.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#read!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.read!/1","type":"function"},{"doc":"Read records from the table based on a secondary index given as position, see mnesia:index_read .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#read_at/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.read_at/2","type":"function"},{"doc":"Read records from the table based on a secondary index given as position, see mnesia:dirty_index_read .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#read_at!/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.read_at!/2","type":"function"},{"doc":"Select records in the table using a match_spec, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#select/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.select/1","type":"function"},{"doc":"Select records in the given table using a match_spec passing a limit or a lock kind, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#select/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.select/2","type":"function"},{"doc":"Select records in the given table using a match_spec passing a limit and a lock kind, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#select/3","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.select/3","type":"function"},{"doc":"Select records in the table using a match_spec, see mnesia:dirty_select .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#select!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.select!/1","type":"function"},{"doc":"Check if the table is a set.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#set?/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.set?/0","type":"function"},{"doc":"Return an iterator to use with Enum functions.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#stream/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.stream/1","type":"function"},{"doc":"Return an iterator to use with the Enum functions using dirty operations to retrieve information.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#stream!/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.stream!/0","type":"function"},{"doc":"Return the type of the table.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#type/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.type/1","type":"function"},{"doc":"Wait for the table optionally with a timeout.","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#wait/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.wait/1","type":"function"},{"doc":"Select records in the table using an Exquisite query, see Exquisite.match/2 and mnesia:select . Options limit - sets the count of elements to select in every continuation lock - sets the kind of lock to use select - Exquisite selector spec qualified - whether to set a name for the record or not","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#where/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.where/2","type":"macro"},{"doc":"Select records in the table using an Exquisite query, see Exquisite.match/2 and mnesia:dirty_select . Options select - Exquisite selector spec qualified - whether to set a name for the record or not","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#where!/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.where!/2","type":"macro"},{"doc":"Write the record to the table, see mnesia:write . Missing fields tagged as autoincrement will be incremented with the counter if nil .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#write/2","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.write/2","type":"function"},{"doc":"Write the record to the table, see mnesia:dirty_write . Missing fields tagged as autoincrement will be incremented with the counter if nil .","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#write!/1","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.write!/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#t:autoincrement/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.autoincrement/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.html#t:t/0","title":"Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table.t/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table","type":"module"},{"doc":"Require the needed modules to use the table effectively.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#__using__/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.__using__/1","type":"macro"},{"doc":"Add a copy of the table on the given node with the given mode.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#add_copy/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.add_copy/2","type":"function"},{"doc":"Add the index in the table for the given attribute.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#add_index/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.add_index/1","type":"function"},{"doc":"Read a record based on a slot, see mnesia:dirty_slot .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#at!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.at!/1","type":"function"},{"doc":"The in order keyword list of attributes passed when the table was defined.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#attributes/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.attributes/0","type":"function"},{"doc":"Check if the table is a bag.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#bag?/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.bag?/0","type":"function"},{"doc":"Clear the content of the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#clear/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.clear/0","type":"function"},{"doc":"Change the copying mode of the table on the given node, see mnesia:change_table_copy_type . Modes :disk sets :disc_copies mode :disk! sets :disc_only_copies mode :memory sets :ram_copies mode","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#copying/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.copying/2","type":"function"},{"doc":"Get the number of records in the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#count/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.count/0","type":"function"},{"doc":"Create the table with the given copying mode and inherent definition.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#create/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.create/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#create!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.create!/1","type":"function"},{"doc":"Return the database the table belongs to.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#database/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.database/0","type":"function"},{"doc":"Delete the record or the given key from the table, see mnesia:delete and mnesia:delete_object .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#delete/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.delete/1","type":"function"},{"doc":"Delete the record or the given key from the table with the given lock, see mnesia:delete and mnesia:delete_object . Locks :write sets a :write lock :write! sets a :sticky_write lock","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#delete/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.delete/2","type":"function"},{"doc":"Delete the record or the given key from the table, see mnesia:dirty_delete and mnesia:dirty_delete_object .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#delete!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.delete!/1","type":"function"},{"doc":"Delete a copy of the table from the given node.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#delete_copy/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.delete_copy/1","type":"function"},{"doc":"Delete the index in the table for the given attribute.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#delete_index/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.delete_index/1","type":"function"},{"doc":"Destroy the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#destroy/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.destroy/0","type":"function"},{"doc":"Destroy the table, raising if an error occurs.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#destroy!/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.destroy!/0","type":"function"},{"doc":"Return the first key or record in the table, see mnesia:first . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#first/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.first/2","type":"function"},{"doc":"Return the first key or record in the table, see mnesia:dirty_first . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#first!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.first!/1","type":"function"},{"doc":"Fold the whole table from the left, see mnesia:foldl .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#foldl/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.foldl/2","type":"function"},{"doc":"Fold the whole table from the right, see mnesia:foldr .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#foldr/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.foldr/2","type":"function"},{"doc":"Force load the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#force/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.force/0","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#hook_read/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.hook_read/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#hook_read!/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.hook_read!/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#hook_write/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.hook_write/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#hook_write!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.hook_write!/1","type":"function"},{"doc":"Get the name of the id key.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#id/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.id/0","type":"function"},{"doc":"Get information about the table, see mnesia:table_info .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#info/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.info/1","type":"function"},{"doc":"Return the key of the record.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#key/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.key/1","type":"function"},{"doc":"Return all the keys in the table, see mnesia:all_keys .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#keys/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.keys/0","type":"function"},{"doc":"Return all keys in the table, see mnesia:dirty_all_keys .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#keys!/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.keys!/0","type":"function"},{"doc":"Return the last key or record in the table, see mnesia:last . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#last/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.last/2","type":"function"},{"doc":"Return the last key or record in the table, see mnesia:dirty_last . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#last!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.last!/1","type":"function"},{"doc":"Lock the table with the given lock. Locks :write sets a :write lock :write! sets a :sticky_write lock :read sets a :read lock","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#lock/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.lock/1","type":"function"},{"doc":"Change the table majority.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#majority/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.majority/1","type":"function"},{"doc":"Set master nodes for the table, see mnesia:set_master_nodes .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#master_nodes/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.master_nodes/1","type":"function"},{"doc":"Select records in the table using simple don't care values, see mnesia:match_object .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#match/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.match/2","type":"function"},{"doc":"Select records in the table using simple don't care values, see mnesia:dirty_match_object .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#match!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.match!/1","type":"function"},{"doc":"Check if the key is present in the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#member?/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.member?/1","type":"function"},{"doc":"Change the access of the table, see mnesia:change_table_access_mode . Modes :both sets read and write mode, it's the default. :read! sets read-only mode.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#mode/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.mode/1","type":"function"},{"doc":"Move a copy of the table from the given node to another given node.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#move_copy/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.move_copy/2","type":"function"},{"doc":"Return the next key or record in the table, see mnesia:next . If you're calling this function from an instance of the table (a record in it), it will get you the next record, if you're calling it directly on the module it will treat the argument as key to start from and return you the next key.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#next/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.next/1","type":"function"},{"doc":"Return the next key or record in the table, see mnesia:dirty_next . If you're calling this function from an instance of the table (a record in it), it will get you the next record, if you're calling it directly on the module it will treat the argument as key to start from and return you the next key.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#next!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.next!/1","type":"function"},{"doc":"The options passed when the table was defined.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#options/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.options/0","type":"function"},{"doc":"Check if the table is an ordered set.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#ordered_set?/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.ordered_set?/0","type":"function"},{"doc":"Return the previous key or record in the table, see mnesia:prev . If you're calling this function from an instance of the table (a record in it), it will get you the previous record, if you're calling it directly on the module it will treat the argument as key to start from and return you the previous key.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#prev/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.prev/1","type":"function"},{"doc":"Return the previous key or record in the table, see mnesia:dirty_prev . If you're calling this function from an instance of the table (a record in it), it will get you the previous record, if you're calling it directly on the module it will treat the argument as key to start from and return you the previous key.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#prev!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.prev!/1","type":"function"},{"doc":"Change the table loading priority.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#priority/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.priority/1","type":"function"},{"doc":"Return properties of the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#properties/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.properties/0","type":"function"},{"doc":"Read a record from the table with the given lock, see mnesia:read . Unlike mnesia:read this returns either the record or nil. Locks :write sets a :write lock :write! sets a :sticky_write lock :read sets a :read lock","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#read/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.read/2","type":"function"},{"doc":"Read a record from the table, see mnesia:dirty_read . Unlike mnesia:dirty_read this returns either the record or nil.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#read!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.read!/1","type":"function"},{"doc":"Read records from the table based on a secondary index given as position, see mnesia:index_read .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#read_at/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.read_at/2","type":"function"},{"doc":"Read records from the table based on a secondary index given as position, see mnesia:dirty_index_read .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#read_at!/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.read_at!/2","type":"function"},{"doc":"Select records in the table using a match_spec, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#select/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.select/1","type":"function"},{"doc":"Select records in the given table using a match_spec passing a limit or a lock kind, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#select/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.select/2","type":"function"},{"doc":"Select records in the given table using a match_spec passing a limit and a lock kind, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#select/3","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.select/3","type":"function"},{"doc":"Select records in the table using a match_spec, see mnesia:dirty_select .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#select!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.select!/1","type":"function"},{"doc":"Check if the table is a set.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#set?/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.set?/0","type":"function"},{"doc":"Return an iterator to use with Enum functions.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#stream/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.stream/1","type":"function"},{"doc":"Return an iterator to use with the Enum functions using dirty operations to retrieve information.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#stream!/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.stream!/0","type":"function"},{"doc":"Return the type of the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#type/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.type/1","type":"function"},{"doc":"Wait for the table optionally with a timeout.","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#wait/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.wait/1","type":"function"},{"doc":"Select records in the table using an Exquisite query, see Exquisite.match/2 and mnesia:select . Options limit - sets the count of elements to select in every continuation lock - sets the kind of lock to use select - Exquisite selector spec qualified - whether to set a name for the record or not","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#where/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.where/2","type":"macro"},{"doc":"Select records in the table using an Exquisite query, see Exquisite.match/2 and mnesia:dirty_select . Options select - Exquisite selector spec qualified - whether to set a name for the record or not","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#where!/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.where!/2","type":"macro"},{"doc":"Write the record to the table, see mnesia:write . Missing fields tagged as autoincrement will be incremented with the counter if nil .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#write/2","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.write/2","type":"function"},{"doc":"Write the record to the table, see mnesia:dirty_write . Missing fields tagged as autoincrement will be incremented with the counter if nil .","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#write!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.write!/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#t:autoincrement/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.autoincrement/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.html#t:t/0","title":"Noizu.AdvancedScaffolding.Database.UniversalLookup.Table.t/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table","type":"module"},{"doc":"Require the needed modules to use the table effectively.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#__using__/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.__using__/1","type":"macro"},{"doc":"Add a copy of the table on the given node with the given mode.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#add_copy/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.add_copy/2","type":"function"},{"doc":"Add the index in the table for the given attribute.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#add_index/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.add_index/1","type":"function"},{"doc":"Read a record based on a slot, see mnesia:dirty_slot .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#at!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.at!/1","type":"function"},{"doc":"The in order keyword list of attributes passed when the table was defined.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#attributes/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.attributes/0","type":"function"},{"doc":"Check if the table is a bag.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#bag?/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.bag?/0","type":"function"},{"doc":"Clear the content of the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#clear/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.clear/0","type":"function"},{"doc":"Change the copying mode of the table on the given node, see mnesia:change_table_copy_type . Modes :disk sets :disc_copies mode :disk! sets :disc_only_copies mode :memory sets :ram_copies mode","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#copying/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.copying/2","type":"function"},{"doc":"Get the number of records in the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#count/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.count/0","type":"function"},{"doc":"Create the table with the given copying mode and inherent definition.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#create/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.create/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#create!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.create!/1","type":"function"},{"doc":"Return the database the table belongs to.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#database/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.database/0","type":"function"},{"doc":"Delete the record or the given key from the table, see mnesia:delete and mnesia:delete_object .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#delete/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.delete/1","type":"function"},{"doc":"Delete the record or the given key from the table with the given lock, see mnesia:delete and mnesia:delete_object . Locks :write sets a :write lock :write! sets a :sticky_write lock","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#delete/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.delete/2","type":"function"},{"doc":"Delete the record or the given key from the table, see mnesia:dirty_delete and mnesia:dirty_delete_object .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#delete!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.delete!/1","type":"function"},{"doc":"Delete a copy of the table from the given node.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#delete_copy/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.delete_copy/1","type":"function"},{"doc":"Delete the index in the table for the given attribute.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#delete_index/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.delete_index/1","type":"function"},{"doc":"Destroy the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#destroy/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.destroy/0","type":"function"},{"doc":"Destroy the table, raising if an error occurs.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#destroy!/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.destroy!/0","type":"function"},{"doc":"Return the first key or record in the table, see mnesia:first . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#first/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.first/2","type":"function"},{"doc":"Return the first key or record in the table, see mnesia:dirty_first . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#first!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.first!/1","type":"function"},{"doc":"Fold the whole table from the left, see mnesia:foldl .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#foldl/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.foldl/2","type":"function"},{"doc":"Fold the whole table from the right, see mnesia:foldr .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#foldr/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.foldr/2","type":"function"},{"doc":"Force load the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#force/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.force/0","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#hook_read/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.hook_read/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#hook_read!/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.hook_read!/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#hook_write/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.hook_write/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#hook_write!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.hook_write!/1","type":"function"},{"doc":"Get the name of the id key.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#id/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.id/0","type":"function"},{"doc":"Get information about the table, see mnesia:table_info .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#info/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.info/1","type":"function"},{"doc":"Return the key of the record.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#key/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.key/1","type":"function"},{"doc":"Return all the keys in the table, see mnesia:all_keys .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#keys/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.keys/0","type":"function"},{"doc":"Return all keys in the table, see mnesia:dirty_all_keys .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#keys!/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.keys!/0","type":"function"},{"doc":"Return the last key or record in the table, see mnesia:last . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#last/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.last/2","type":"function"},{"doc":"Return the last key or record in the table, see mnesia:dirty_last . By default it returns the record, if you want only the key pass true as first parameter. If the table is a bag, it will return a list of records.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#last!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.last!/1","type":"function"},{"doc":"Lock the table with the given lock. Locks :write sets a :write lock :write! sets a :sticky_write lock :read sets a :read lock","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#lock/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.lock/1","type":"function"},{"doc":"Change the table majority.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#majority/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.majority/1","type":"function"},{"doc":"Set master nodes for the table, see mnesia:set_master_nodes .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#master_nodes/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.master_nodes/1","type":"function"},{"doc":"Select records in the table using simple don't care values, see mnesia:match_object .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#match/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.match/2","type":"function"},{"doc":"Select records in the table using simple don't care values, see mnesia:dirty_match_object .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#match!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.match!/1","type":"function"},{"doc":"Check if the key is present in the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#member?/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.member?/1","type":"function"},{"doc":"Change the access of the table, see mnesia:change_table_access_mode . Modes :both sets read and write mode, it's the default. :read! sets read-only mode.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#mode/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.mode/1","type":"function"},{"doc":"Move a copy of the table from the given node to another given node.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#move_copy/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.move_copy/2","type":"function"},{"doc":"Return the next key or record in the table, see mnesia:next . If you're calling this function from an instance of the table (a record in it), it will get you the next record, if you're calling it directly on the module it will treat the argument as key to start from and return you the next key.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#next/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.next/1","type":"function"},{"doc":"Return the next key or record in the table, see mnesia:dirty_next . If you're calling this function from an instance of the table (a record in it), it will get you the next record, if you're calling it directly on the module it will treat the argument as key to start from and return you the next key.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#next!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.next!/1","type":"function"},{"doc":"The options passed when the table was defined.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#options/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.options/0","type":"function"},{"doc":"Check if the table is an ordered set.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#ordered_set?/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.ordered_set?/0","type":"function"},{"doc":"Return the previous key or record in the table, see mnesia:prev . If you're calling this function from an instance of the table (a record in it), it will get you the previous record, if you're calling it directly on the module it will treat the argument as key to start from and return you the previous key.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#prev/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.prev/1","type":"function"},{"doc":"Return the previous key or record in the table, see mnesia:dirty_prev . If you're calling this function from an instance of the table (a record in it), it will get you the previous record, if you're calling it directly on the module it will treat the argument as key to start from and return you the previous key.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#prev!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.prev!/1","type":"function"},{"doc":"Change the table loading priority.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#priority/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.priority/1","type":"function"},{"doc":"Return properties of the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#properties/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.properties/0","type":"function"},{"doc":"Read a record from the table with the given lock, see mnesia:read . Unlike mnesia:read this returns either the record or nil. Locks :write sets a :write lock :write! sets a :sticky_write lock :read sets a :read lock","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#read/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.read/2","type":"function"},{"doc":"Read a record from the table, see mnesia:dirty_read . Unlike mnesia:dirty_read this returns either the record or nil.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#read!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.read!/1","type":"function"},{"doc":"Read records from the table based on a secondary index given as position, see mnesia:index_read .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#read_at/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.read_at/2","type":"function"},{"doc":"Read records from the table based on a secondary index given as position, see mnesia:dirty_index_read .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#read_at!/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.read_at!/2","type":"function"},{"doc":"Select records in the table using a match_spec, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#select/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.select/1","type":"function"},{"doc":"Select records in the given table using a match_spec passing a limit or a lock kind, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#select/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.select/2","type":"function"},{"doc":"Select records in the given table using a match_spec passing a limit and a lock kind, see mnesia:select .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#select/3","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.select/3","type":"function"},{"doc":"Select records in the table using a match_spec, see mnesia:dirty_select .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#select!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.select!/1","type":"function"},{"doc":"Check if the table is a set.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#set?/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.set?/0","type":"function"},{"doc":"Return an iterator to use with Enum functions.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#stream/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.stream/1","type":"function"},{"doc":"Return an iterator to use with the Enum functions using dirty operations to retrieve information.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#stream!/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.stream!/0","type":"function"},{"doc":"Return the type of the table.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#type/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.type/1","type":"function"},{"doc":"Wait for the table optionally with a timeout.","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#wait/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.wait/1","type":"function"},{"doc":"Select records in the table using an Exquisite query, see Exquisite.match/2 and mnesia:select . Options limit - sets the count of elements to select in every continuation lock - sets the kind of lock to use select - Exquisite selector spec qualified - whether to set a name for the record or not","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#where/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.where/2","type":"macro"},{"doc":"Select records in the table using an Exquisite query, see Exquisite.match/2 and mnesia:dirty_select . Options select - Exquisite selector spec qualified - whether to set a name for the record or not","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#where!/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.where!/2","type":"macro"},{"doc":"Write the record to the table, see mnesia:write . Missing fields tagged as autoincrement will be incremented with the counter if nil .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#write/2","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.write/2","type":"function"},{"doc":"Write the record to the table, see mnesia:dirty_write . Missing fields tagged as autoincrement will be incremented with the counter if nil .","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#write!/1","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.write!/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#t:autoincrement/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.autoincrement/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.html#t:t/0","title":"Noizu.AdvancedScaffolding.Database.UniversalReverseLookup.Table.t/0","type":"type"},{"doc":"Provides scaffolding for domain object top level module which in turn contains the nested Entity, Repo, Index, etc. modules. @todo shift some common functionality into protocols to reduce amount of generated code. @todo move inline nested modules into after compile method. Only implement if not already defined.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__base__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__base__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__entity__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__entity__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__enum__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__enum__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__enum__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__enum__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__erp__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__erp__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__fields__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__fields__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__fields__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__fields__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__indexing__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__indexing__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__indexing__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__indexing__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__json__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__json__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__json__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__json__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__nmid__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__nmid__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__nmid__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__nmid__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__noizu_info__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__noizu_info__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__noizu_info__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__noizu_info__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__persistence__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__persistence__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__persistence__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__persistence__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__persistence__/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__persistence__/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__poly_base__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__poly_base__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__repo__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__repo__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:__sref__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.__sref__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:entity/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.entity/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:entity/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.entity/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:entity!/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.entity!/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:entity!/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.entity!/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:id/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.id/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:ref/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.ref/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:sref/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.sref/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.html#c:vsn/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Base.Behaviour.vsn/0","type":"callback"},{"doc":"Provides scaffolding for DomainObject.Entity @todo simplify how extensions (like kitchen sink CMS extensions) are applied.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity","type":"module"},{"doc":"Initialize a DomainObject.Entity. Caller passes in identifier and field definitions which are in turn used to generate the domain object entity's configuration options and defstruct statement.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.html#__noizu_entity__/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.__noizu_entity__/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__as_record__/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__as_record__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__as_record__!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__as_record__!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__as_record_type__/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__as_record_type__/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__as_record_type__/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__as_record_type__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__as_record_type__!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__as_record_type__!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__as_record_type__!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__as_record_type__!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__base__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__base__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__delete_index__/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__delete_index__/5","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__delete_indexes__/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__delete_indexes__/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__entity__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__entity__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__enum__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__enum__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__enum__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__enum__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__erp__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__erp__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__fields__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__fields__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__fields__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__fields__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__from_record__/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__from_record__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__from_record__!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__from_record__!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__id_to_string__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__id_to_string__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__indexing__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__indexing__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__indexing__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__indexing__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__json__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__json__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__json__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__json__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__nmid__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__nmid__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__nmid__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__nmid__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__noizu_info__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__noizu_info__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__noizu_info__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__noizu_info__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__persistence__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__persistence__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__persistence__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__persistence__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__persistence__/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__persistence__/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__poly_base__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__poly_base__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__repo__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__repo__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__sref__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__sref__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__sref_prefix__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__sref_prefix__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__string_to_id__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__string_to_id__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__strip_inspect__/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__strip_inspect__/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__strip_pii__/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__strip_pii__/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__update_index__/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__update_index__/5","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__update_indexes__/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__update_indexes__/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__valid__/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__valid__/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__valid_identifier__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__valid_identifier__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__write_index__/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__write_index__/5","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:__write_indexes__/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.__write_indexes__/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:ecto_entity?/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.ecto_entity?/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:ecto_identifier/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.ecto_identifier/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:entity/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.entity/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:entity/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.entity/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:entity!/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.entity!/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:entity!/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.entity!/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:from_json/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.from_json/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:has_permission!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.has_permission!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:has_permission?/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.has_permission?/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:id/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.id/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:ref/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.ref/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:source/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.source/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:sref/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.sref/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:universal_identifier/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.universal_identifier/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:version_change/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.version_change/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:version_change/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.version_change/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:version_change!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.version_change!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:version_change!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.version_change!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.html#c:vsn/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Behaviour.vsn/0","type":"callback"},{"doc":"Default Implementation.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#ecto_identifier/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.ecto_identifier/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#entity/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.entity/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#entity!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.entity!/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#from_json/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.from_json/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#has_permission!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.has_permission!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#has_permission?/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.has_permission?/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#id/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.id/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#ref/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.ref/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#ref_ok/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.ref_ok/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#sref/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.sref/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#sref_ok/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.sref_ok/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#strip_transient/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.strip_transient/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.html#universal_identifier_lookup/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Default.universal_identifier_lookup/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros","type":"module"},{"doc":"Declare DomainObject.Entity ecto/universal identifier, for entities that do not use a sequential numeric identifier but need read/write to ecto as well as mnesia.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#ecto_identifier/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.ecto_identifier/2","type":"macro"},{"doc":"Declare DomainObject.Entity identifier field type.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#identifier/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.identifier/2","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#internal_field/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.internal_field/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#internal_fields/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.internal_fields/2","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#pii_level/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.pii_level/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#private_field/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.private_field/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#private_fields/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.private_fields/2","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#public_field/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.public_field/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#public_fields/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.public_fields/2","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#restricted_field/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.restricted_field/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#restricted_fields/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.restricted_fields/2","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#transient_field/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.transient_field/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.html#transient_fields/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Entity.Field.Macros.transient_fields/2","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__build_search_query__/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__build_search_query__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__config__/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__config__/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__data_dir__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__data_dir__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__delta_index__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__delta_index__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__delta_source__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__delta_source__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__extract_field__/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__extract_field__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__index_header__/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__index_header__/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__index_record__/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__index_record__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__index_schema_fields__/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__index_schema_fields__/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__index_stem__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__index_stem__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__index_supported__?/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__index_supported__?/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__indexing__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__indexing__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__indexing__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__indexing__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__noizu_info__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__noizu_info__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__noizu_info__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__noizu_info__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__primary_index__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__primary_index__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__primary_source__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__primary_source__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__rt_index__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__rt_index__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__rt_source__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__rt_source__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__schema_close__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__schema_close__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__schema_open__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__schema_open__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__search_clause__/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__search_clause__/5","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__search_content__/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__search_content__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__search_indexes__/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__search_indexes__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__search_limit__/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__search_limit__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__search_max_results__/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__search_max_results__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:__search_order_by__/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.__search_order_by__/5","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:build/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.build/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:delete_index/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.delete_index/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:fields/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.fields/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:has_query_permission?/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.has_query_permission?/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:search/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.search/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:search_query/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.search_query/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:sql_escape_string/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.sql_escape_string/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.html#c:update_index/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Behaviour.update_index/3","type":"callback"},{"doc":"Default Implementation.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default","type":"module"},{"doc":"Output closing xml snippet for record set.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#__schema_close__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.__schema_close__/0","type":"function"},{"doc":"Output opening xml snippet for record set.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#__schema_open__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.__schema_open__/0","type":"function"},{"doc":"Text Match Search","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#__search_content__/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.__search_content__/5","type":"function"},{"doc":"Query offset/limit pagination.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#__search_limit__/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.__search_limit__/5","type":"function"},{"doc":"Maximum search results to index for query.","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#__search_max_results__/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.__search_max_results__/5","type":"function"},{"doc":"Search Order By","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#__search_order_by__/6","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.__search_order_by__/6","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#build/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.build/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#delete_index/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.delete_index/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#fields/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.fields/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#rt_attr/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.rt_attr/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#search/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.search/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#search_query/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.search_query/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#sql_escape_string/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.sql_escape_string/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.html#update_index/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Index.Default.update_index/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Inspect.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Inspect","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Inspect.html#inspect/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Inspect.inspect/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Inspect.html#inspect/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Inspect.inspect/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__base__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__base__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__entity__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__entity__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__enum__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__enum__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__enum__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__enum__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__erp__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__erp__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__fields__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__fields__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__fields__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__fields__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__indexing__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__indexing__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__indexing__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__indexing__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__json__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__json__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__json__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__json__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__noizu_info__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__noizu_info__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__noizu_info__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__noizu_info__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__poly_base__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__poly_base__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__repo__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__repo__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:__sref__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.__sref__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:cache/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.cache/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:clear_list_cache!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.clear_list_cache!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:create/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.create/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:create!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.create!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:delete/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.delete/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:delete!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.delete!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:delete_cache/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.delete_cache/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:entity/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.entity/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:entity/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.entity/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:entity!/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.entity!/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:entity!/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.entity!/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:generate_identifier/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.generate_identifier/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:generate_identifier!/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.generate_identifier!/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:get/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.get/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:get!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.get!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:has_permission!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.has_permission!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:has_permission?/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.has_permission?/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:id/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.id/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_create/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_create/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_create!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_create!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_create_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_create_callback/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_create_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_create_callback!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_delete/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_delete/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_delete!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_delete!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_delete_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_delete_callback/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_delete_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_delete_callback!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_get/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_get/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_get!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_get!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_get_identifier/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_get_identifier/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_get_identifier!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_get_identifier!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_post_create_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_post_create_callback/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_post_create_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_post_create_callback!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_post_delete_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_post_delete_callback/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_post_delete_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_post_delete_callback!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_post_get_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_post_get_callback/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_post_get_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_post_get_callback!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_post_update_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_post_update_callback/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_post_update_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_post_update_callback!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_pre_create_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_pre_create_callback/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_pre_create_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_pre_create_callback!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_pre_delete_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_pre_delete_callback/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_pre_delete_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_pre_delete_callback!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_pre_update_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_pre_update_callback/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_pre_update_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_pre_update_callback!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_update/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_update/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_update!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_update!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_update_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_update_callback/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:layer_update_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer_update_callback!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:list/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.list/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:list!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.list!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:list_cache!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.list_cache!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:post_create_callback/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.post_create_callback/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:post_create_callback!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.post_create_callback!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:post_delete_callback/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.post_delete_callback/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:post_delete_callback!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.post_delete_callback!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:post_get_callback/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.post_get_callback/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:post_get_callback!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.post_get_callback!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:post_update_callback/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.post_update_callback/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:post_update_callback!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.post_update_callback!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:pre_create_callback/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.pre_create_callback/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:pre_create_callback!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.pre_create_callback!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:pre_delete_callback/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.pre_delete_callback/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:pre_delete_callback!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.pre_delete_callback!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:pre_update_callback/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.pre_update_callback/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:pre_update_callback!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.pre_update_callback!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:ref/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.ref/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:sref/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.sref/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:update/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.update/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:update!/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.update!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#c:vsn/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.vsn/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#t:entity/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.entity/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#t:entity_reference/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.entity_reference/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#t:layer/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.layer/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#t:opts/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.opts/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#t:ref/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.ref/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.html#t:sref/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Behaviour.sref/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#cache/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.cache/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#clear_list_cache!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.clear_list_cache!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#create/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.create/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#create!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.create!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#delete/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.delete/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#delete!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.delete!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#delete_cache/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.delete_cache/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#generate_identifier/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.generate_identifier/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#generate_identifier!/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.generate_identifier!/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#get/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.get/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#get!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.get!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#has_permission!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.has_permission!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#has_permission!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.has_permission!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#has_permission?/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.has_permission?/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#has_permission?/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.has_permission?/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_create/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_create/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_create!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_create!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_create_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_create_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_create_callback!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_create_callback!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_create_loop/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_create_loop/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_create_loop!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_create_loop!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_delete/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_delete/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_delete!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_delete!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_delete_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_delete_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_delete_callback!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_delete_callback!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_get/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_get/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_get!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_get!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_get_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_get_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_get_callback!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_get_callback!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_get_identifier/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_get_identifier/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_post_create_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_post_create_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_post_delete_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_post_delete_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_post_get_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_post_get_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_post_update_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_post_update_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_pre_create_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_pre_create_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_pre_delete_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_pre_delete_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_pre_update_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_pre_update_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_update/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_update/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_update!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_update!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_update_callback/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_update_callback/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_update_callback!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_update_callback!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_update_loop/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_update_loop/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#layer_update_loop!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.layer_update_loop!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#list/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.list/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#list!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.list!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#list_cache!/5","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.list_cache!/5","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#post_create_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.post_create_callback/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#post_delete_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.post_delete_callback/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#post_delete_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.post_delete_callback!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#post_get_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.post_get_callback/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#post_get_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.post_get_callback!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#post_update_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.post_update_callback/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#pre_create_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.pre_create_callback/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#pre_create_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.pre_create_callback!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#pre_delete_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.pre_delete_callback/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#pre_delete_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.pre_delete_callback!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#pre_update_callback/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.pre_update_callback/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#pre_update_callback!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.pre_update_callback!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#register__uid/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.register__uid/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#update/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.update/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.html#update!/4","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Repo.Default.update!/4","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:__auto_changeset__/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.__auto_changeset__/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:__auto_changeset__/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.__auto_changeset__/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:__noizu_info__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.__noizu_info__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:__noizu_info__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.__noizu_info__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:__persistence__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.__persistence__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:__persistence__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.__persistence__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:__persistence__/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.__persistence__/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:__schema_table__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.__schema_table__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:new/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.new/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:new/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.new/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.html#c:validate_changeset/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Behaviour.validate_changeset/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Default.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Default","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Default.html#expand_base/2","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Default.expand_base/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Default.html#expand_entity/3","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Default.expand_entity/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Entity.Behaviour.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Entity.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Entity.Behaviour.html#c:__entity__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Entity.Behaviour.__entity__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Entity.Behaviour.html#c:__erp__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Entity.Behaviour.__erp__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Entity.Behaviour.html#c:__repo__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Entity.Behaviour.__repo__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Entity.Behaviour.html#c:__sref__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.Entity.Behaviour.__sref__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.NMID.Behaviour.html","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.NMID.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.NMID.Behaviour.html#c:__nmid__/0","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.NMID.Behaviour.__nmid__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.NMID.Behaviour.html#c:__nmid__/1","title":"Noizu.AdvancedScaffolding.Internal.DomainObject.Table.NMID.Behaviour.__nmid__/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.html","title":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.Default.html","title":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.Default","type":"module"},{"doc":"Casts to Enum.","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.Default.html#cast/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.Default.cast/2","type":"function"},{"doc":"Same as cast/1 but raises Ecto.CastError on invalid arguments.","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.Default.html#cast!/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.Default.cast!/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.Default.html#dump/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.Default.dump/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.Default.html#load/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.EnumType.Default.load/2","type":"function"},{"doc":"Provides ECTO handler to convert between a DomainObject.Entity mysql identifier and elixir ref format.","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.html","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.Default.html","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.Default","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.Default.html#cast/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.Default.cast/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.Default.html#cast!/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.Default.cast!/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.Default.html#dump/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.Default.dump/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.Default.html#load/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Basic.Default.load/2","type":"function"},{"doc":"Behavior definition for Ecto Type handlers that support switching between a domain object entity ref/atom and their relation database's equivalent.","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Behaviour.html","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Behaviour.html#c:__entity__/0","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Behaviour.__entity__/0","type":"callback"},{"doc":"Provides ECTO handler to convert between a Enum type DomainObject.Entity mysql enum code and elixir atom representation.","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.html","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.Default.html","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.Default","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.Default.html#cast/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.Default.cast/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.Default.html#cast!/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.Default.cast!/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.Default.html#dump/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.Default.dump/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.Default.html#load/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Enum.Default.load/2","type":"function"},{"doc":"Provides ECTO handler to convert between a DomainObject.Entity mysql identifier or uuid and elixir ref format for Entities that support Universal IDs.","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.html","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.IntegerDefault.html","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.IntegerDefault","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.IntegerDefault.html#cast/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.IntegerDefault.cast/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.IntegerDefault.html#cast!/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.IntegerDefault.cast!/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.IntegerDefault.html#dump/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.IntegerDefault.dump/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.IntegerDefault.html#load/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.IntegerDefault.load/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.UUIDDefault.html","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.UUIDDefault","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.UUIDDefault.html#cast/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.UUIDDefault.cast/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.UUIDDefault.html#cast!/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.UUIDDefault.cast!/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.UUIDDefault.html#dump/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.UUIDDefault.dump/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.UUIDDefault.html#load/2","title":"Noizu.AdvancedScaffolding.Internal.Ecto.Reference.Universal.UUIDDefault.load/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html","title":"Noizu.AdvancedScaffolding.Internal.Helpers","type":"module"},{"doc":"Load settings for SimpleObject from passed in options, inline @attributes and its base module's attributes or config methods (if already compiled)","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#__prepare_simple_object__/1","title":"Noizu.AdvancedScaffolding.Internal.Helpers.__prepare_simple_object__/1","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#extract_attribute/3","title":"Noizu.AdvancedScaffolding.Internal.Helpers.extract_attribute/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#extract_cache_attribute/3","title":"Noizu.AdvancedScaffolding.Internal.Helpers.extract_cache_attribute/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#extract_has_attribute/3","title":"Noizu.AdvancedScaffolding.Internal.Helpers.extract_has_attribute/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#extract_has_enum_attribute/3","title":"Noizu.AdvancedScaffolding.Internal.Helpers.extract_has_enum_attribute/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#extract_has_json_attribute/3","title":"Noizu.AdvancedScaffolding.Internal.Helpers.extract_has_json_attribute/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#extract_has_nmid_attribute/3","title":"Noizu.AdvancedScaffolding.Internal.Helpers.extract_has_nmid_attribute/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#extract_has_persistence_attribute/3","title":"Noizu.AdvancedScaffolding.Internal.Helpers.extract_has_persistence_attribute/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#extract_json_attribute/3","title":"Noizu.AdvancedScaffolding.Internal.Helpers.extract_json_attribute/3","type":"macro"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#extract_transform_attribute/4","title":"Noizu.AdvancedScaffolding.Internal.Helpers.extract_transform_attribute/4","type":"macro"},{"doc":"Obtain Relative File Path","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#file_rel_dir/1","title":"Noizu.AdvancedScaffolding.Internal.Helpers.file_rel_dir/1","type":"function"},{"doc":"Insure macro/use is only called once.","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#insure_single_use/2","title":"Noizu.AdvancedScaffolding.Internal.Helpers.insure_single_use/2","type":"macro"},{"doc":"Strip prefixes from Module. (e.g. remove Noizu.AdvancedScaffolding).","ref":"Noizu.AdvancedScaffolding.Internal.Helpers.html#module_rel/2","title":"Noizu.AdvancedScaffolding.Internal.Helpers.module_rel/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.html","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base","type":"module"},{"doc":"Configure SimpleObject fields and internals.","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.html#__noizu_struct__/3","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.__noizu_struct__/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__as_record__/4","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__as_record__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__as_record__/5","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__as_record__/5","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__as_record__!/4","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__as_record__!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__as_record__!/5","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__as_record__!/5","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__as_record_type__/4","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__as_record_type__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__as_record_type__/5","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__as_record_type__/5","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__as_record_type__!/4","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__as_record_type__!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__as_record_type__!/5","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__as_record_type__!/5","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__from_record__/3","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__from_record__/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__from_record__/4","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__from_record__/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__from_record__!/3","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__from_record__!/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__from_record__!/4","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__from_record__!/4","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__kind__/0","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__kind__/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__strip_pii__/2","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__strip_pii__/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__valid__/2","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__valid__/2","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:__valid__/3","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.__valid__/3","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:ecto_entity?/0","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.ecto_entity?/0","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:ecto_identifier/1","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.ecto_identifier/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:source/1","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.source/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.html#c:universal_identifier/1","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Behaviour.universal_identifier/1","type":"callback"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Default.html","title":"Noizu.AdvancedScaffolding.Internal.SimpleObject.Base.Default","type":"module"},{"doc":"The Scaffolding library requires Ecto.Repo modules (if used within scaffolding) to include a metadata() method that returns this struct. @example defmodule MyAppSchema.MySQL.Repo do use Ecto.Repo, otp_app: :my_app, adapter: Ecto.Adapters.MyXQL def metadata(), do: %Noizu.Scaffolding.V3.Schema.EctoMetadata{repo: __MODULE__, database: MyAppSchema.MySQL} end","ref":"Noizu.AdvancedScaffolding.Schema.Metadata.Ecto.html","title":"Noizu.AdvancedScaffolding.Schema.Metadata.Ecto","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Schema.Metadata.Ecto.html#t:t/0","title":"Noizu.AdvancedScaffolding.Schema.Metadata.Ecto.t/0","type":"type"},{"doc":"Generic Metadata for non Redis/ecto/mnesia persistence layers. @todo instead of a default object we should rely on protocols or simply require any struct used here provides the database, type, and repo params.","ref":"Noizu.AdvancedScaffolding.Schema.Metadata.Other.html","title":"Noizu.AdvancedScaffolding.Schema.Metadata.Other","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Schema.Metadata.Other.html#t:t/0","title":"Noizu.AdvancedScaffolding.Schema.Metadata.Other.t/0","type":"type"},{"doc":"Metadata field that must be added in a Redis handler module if used with the scaffolding framework. @example defmodule MyAppSchema.Redis do def child_spec(_args) do #... end def metadata(), do: %Noizu.Scaffolding.V3.Schema.RedisMetadata{repo: __MODULE__} end","ref":"Noizu.AdvancedScaffolding.Schema.Metadata.Redis.html","title":"Noizu.AdvancedScaffolding.Schema.Metadata.Redis","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Schema.Metadata.Redis.html#t:t/0","title":"Noizu.AdvancedScaffolding.Schema.Metadata.Redis.t/0","type":"type"},{"doc":"Data structure for defining a persistence layer used by a domain object entity. It contains transaction requirement rules, rules for blocking/non blocking updates (e.g. if you may write to redis in a new thread. while you might need to confirm a successful mysql table write before proceeding due to foreign key constraints, etc. @todo switch to defrecord for faster operations, lower overhead.","ref":"Noizu.AdvancedScaffolding.Schema.PersistenceLayer.html","title":"Noizu.AdvancedScaffolding.Schema.PersistenceLayer","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Schema.PersistenceLayer.html#t:t/0","title":"Noizu.AdvancedScaffolding.Schema.PersistenceLayer.t/0","type":"type"},{"doc":"Persistence layers and configuration details for domain object entities.","ref":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.html","title":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings","type":"module"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.html#file_rel_dir/1","title":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.file_rel_dir/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.html#file_rel_dir/3","title":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.file_rel_dir/3","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.html#module_rel/2","title":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.module_rel/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.html#module_rel/3","title":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.module_rel/3","type":"function"},{"doc":"Expand out fields for each persistence type and update our persistence settings with our updated layers/schemas/tables fields.","ref":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.html#update_schema_fields/2","title":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.update_schema_fields/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.html#t:t/0","title":"Noizu.AdvancedScaffolding.Schema.PersistenceSettings.t/0","type":"type"},{"doc":"Encode/Decode Bool value for Sphinx Database. This module provides an Ecto.Type implementation for handling boolean values in the context of the Sphinx search engine. It is responsible for casting, loading, and dumping boolean values while adhering to the format understood by Sphinx.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool","type":"module"},{"doc":"Constructs search clauses based on field values. This function is responsible for generating search clauses for the given field and parameters. It takes into account the field's structure and ensures that the generated clauses are compatible with the Sphinx search engine.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#__search_clauses__/6","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.__search_clauses__/6","type":"function"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#__sphinx_bits__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#__sphinx_default__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#__sphinx_encoded__/4","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#__sphinx_encoding__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#__sphinx_expand_field__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#__sphinx_field__/0","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#__sphinx_has_default__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.__sphinx_has_default__/3","type":"function"},{"doc":"Casts the given value to a boolean. This function takes an input value and attempts to convert it into a boolean value. It supports various string representations as well as numeric representations for true and false.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#cast/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.cast/1","type":"function"},{"doc":"Same as cast/1 but raises Ecto.CastError on invalid arguments. This function works similarly to cast/1 , but it raises an Ecto.CastError exception if the given value cannot be converted into a boolean value.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#cast!/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.cast!/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.dump/1 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#dump/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.dump/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#embed_as/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#equal?/2","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.equal?/2","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#has_query_permission?/5","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.has_query_permission?/5","type":"function"},{"doc":"Loads the given value as a boolean. This function takes an input value and converts it into a boolean value if possible. It supports various string representations as well as numeric representations for true and false.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.html#load/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Bool.load/1","type":"function"},{"doc":"Encode/Decode Float value for Sphinx Database.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#__sphinx_bits__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#__sphinx_default__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#__sphinx_encoded__/4","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#__sphinx_encoding__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#__sphinx_expand_field__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#__sphinx_field__/0","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#__sphinx_has_default__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.__sphinx_has_default__/3","type":"function"},{"doc":"Casts to Ref.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#cast/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.cast/1","type":"function"},{"doc":"Same as cast/1 but raises Ecto.CastError on invalid arguments.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#cast!/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.cast!/1","type":"function"},{"doc":"Encode the input value to a compatible format for storing in Sphinx Database.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#dump/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.dump/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#embed_as/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#equal?/2","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.equal?/2","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#has_query_permission?/5","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.has_query_permission?/5","type":"function"},{"doc":"Decode the stored value from Sphinx Database to an Elixir-friendly format.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.html#load/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Float.load/1","type":"function"},{"doc":"Encode/Decode Integer value for Sphinx Database.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#__sphinx_bits__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#__sphinx_default__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#__sphinx_encoded__/4","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#__sphinx_encoding__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#__sphinx_expand_field__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#__sphinx_field__/0","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#__sphinx_has_default__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.__sphinx_has_default__/3","type":"function"},{"doc":"Casts to Ref.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#cast/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.cast/1","type":"function"},{"doc":"Same as cast/1 but raises Ecto.CastError on invalid arguments.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#cast!/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.cast!/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#embed_as/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#equal?/2","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.equal?/2","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#has_query_permission?/5","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.has_query_permission?/5","type":"function"},{"doc":"Callback implementation for Ecto.Type.load/1 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.html#load/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.Integer.load/1","type":"function"},{"doc":"Encode/Decode Nullable Integer value for Sphinx Database.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#__sphinx_bits__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#__sphinx_default__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#__sphinx_encoded__/4","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#__sphinx_encoding__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#__sphinx_expand_field__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#__sphinx_field__/0","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#__sphinx_has_default__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.__sphinx_has_default__/3","type":"function"},{"doc":"Casts to Ref.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#cast/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.cast/1","type":"function"},{"doc":"Same as cast/1 but raises Ecto.CastError on invalid arguments.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#cast!/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.cast!/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#embed_as/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#equal?/2","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.equal?/2","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#has_query_permission?/5","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.has_query_permission?/5","type":"function"},{"doc":"Callback implementation for Ecto.Type.load/1 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.html#load/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.NullableInteger.load/1","type":"function"},{"doc":"Encode/Decode Timestamp value for Sphinx Database.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#__sphinx_bits__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#__sphinx_default__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#__sphinx_encoded__/4","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#__sphinx_encoding__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#__sphinx_expand_field__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#__sphinx_field__/0","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#__sphinx_has_default__/3","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.__sphinx_has_default__/3","type":"function"},{"doc":"Casts to Ref.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#cast/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.cast/1","type":"function"},{"doc":"Same as cast/1 but raises Ecto.CastError on invalid arguments.","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#cast!/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.cast!/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#embed_as/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#equal?/2","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.equal?/2","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#has_query_permission?/5","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.has_query_permission?/5","type":"function"},{"doc":"Callback implementation for Ecto.Type.load/1 .","ref":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.html#load/1","title":"Noizu.AdvancedScaffolding.Sphinx.Type.TimeStamp.load/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Support.Schema.Core.html","title":"Noizu.AdvancedScaffolding.Support.Schema.Core","type":"module"},{"doc":"Callback implementation for Noizu.MnesiaVersioning.SchemaBehaviour.change_sets/0 .","ref":"Noizu.AdvancedScaffolding.Support.Schema.Core.html#change_sets/0","title":"Noizu.AdvancedScaffolding.Support.Schema.Core.change_sets/0","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Support.Schema.Core.html#create_table/2","title":"Noizu.AdvancedScaffolding.Support.Schema.Core.create_table/2","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Support.Schema.Core.html#destroy_table/2","title":"Noizu.AdvancedScaffolding.Support.Schema.Core.destroy_table/2","type":"function"},{"doc":"The Noizu.DomainObject.Atom.IdentifierType module implements the Noizu.DomainObject.IdentifierTypeBehaviour behaviour for handling atom-based identifier types in the Noizu.DomainObject framework. This module provides functions for validating, encoding, and decoding atom-based identifiers. It also includes functionality for preparing regex snippets for matching identifiers. Callbacks type/0 : Returns the type of the identifier. __valid_identifier__/2 : Checks if a provided value is correct for the identifier type. __sref_section_regex__/1 : Prepares a regex snippet for matching the identifier. __id_to_string__/2 : Encodes a valid identifier into a string for sref encoding. __string_to_id__/2 : Decodes a string into the identifier type.","ref":"Noizu.DomainObject.Atom.IdentifierType.html","title":"Noizu.DomainObject.Atom.IdentifierType","type":"module"},{"doc":"Encodes a valid identifier into a string for sref encoding. Params identifier: The valid identifier value to encode. c: The identifier configuration. Returns : If the identifier is encoded successfully. : If there is an error encoding the identifier, with the reason for the failure.","ref":"Noizu.DomainObject.Atom.IdentifierType.html#__id_to_string__/2","title":"Noizu.DomainObject.Atom.IdentifierType.__id_to_string__/2","type":"function"},{"doc":"Prepares a regex snippet for matching the identifier. Params c: The identifier configuration. Returns : If the regex snippet is prepared successfully. : If there is an error preparing the regex snippet, with the reason for the failure.","ref":"Noizu.DomainObject.Atom.IdentifierType.html#__sref_section_regex__/1","title":"Noizu.DomainObject.Atom.IdentifierType.__sref_section_regex__/1","type":"function"},{"doc":"Decodes a string into the identifier type. Params identifier: The string to decode into the identifier type. c: The identifier configuration. Returns : If the string is decoded successfully into the identifier type. : If there is an error decoding the string, with the reason for the failure.","ref":"Noizu.DomainObject.Atom.IdentifierType.html#__string_to_id__/2","title":"Noizu.DomainObject.Atom.IdentifierType.__string_to_id__/2","type":"function"},{"doc":"Checks if the provided value is correct for the identifier type. Params identifier: The identifier value to check. c: The identifier configuration. Returns :ok: If the identifier value is correct. : If the identifier value is incorrect, with the reason for the failure.","ref":"Noizu.DomainObject.Atom.IdentifierType.html#__valid_identifier__/2","title":"Noizu.DomainObject.Atom.IdentifierType.__valid_identifier__/2","type":"function"},{"doc":"Returns the type of the identifier. Returns :identifier_type: The type of the identifier.","ref":"Noizu.DomainObject.Atom.IdentifierType.html#type/0","title":"Noizu.DomainObject.Atom.IdentifierType.type/0","type":"function"},{"doc":"CacheHandler Behaviour The CacheHandler Behavior defines how to check, update and clear cached DomainObject values to a specific cache mechanisms. The DomainObject.Repo uses a module providing this behavior to implement it's cache/3 , delete_cache/3 and pre_cache/3 methods. FastGlobal will be used by default if the cache is not explicitly disabled or set in the DomainObject body using the @cache attribute. You may extend with your own implementation as needed. Simply put your provider's module name in the Handler portion of the @cache attribute. Format @cache :disabled @cache Handler # use default options @cache { Handler , Options } Provided CacheHandlers handlers :fast_global Noizu.FastGlobal.Cluster (default) :con_cache ets backed ConCache handler :disabled no handler :redis uses erlang term serialization :redis_json uses json serialization :rocksdb facebook rocksdb kv database backed cache handler. Default Cache Options prime automatically populate cache on Repo.cache miss. ttl default ttl for cache entries miss_ttl default ttl for error/cache-miss cache entries. Example defmodule MyDO do #... @cache { :redis , [ prime : true , ttl : 123 , miss_ttl : 5 ] } defmodule Entity do #... end defmodule Repo do #... end end # Interact MyDO.Repo . cache ( 1234 , context , options ) MyDO.Repo . delete_cache ( 1234 , context , options ) MyDO.Repo . pre_cache ( object , context , options )","ref":"Noizu.DomainObject.CacheHandler.html","title":"Noizu.DomainObject.CacheHandler","type":"behaviour"},{"doc":"","ref":"Noizu.DomainObject.CacheHandler.html#c:cache_key/4","title":"Noizu.DomainObject.CacheHandler.cache_key/4","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.CacheHandler.html#c:delete_cache/4","title":"Noizu.DomainObject.CacheHandler.delete_cache/4","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.CacheHandler.html#c:get_cache/4","title":"Noizu.DomainObject.CacheHandler.get_cache/4","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.CacheHandler.html#c:pre_cache/4","title":"Noizu.DomainObject.CacheHandler.pre_cache/4","type":"callback"},{"doc":"The Noizu.DomainObject.CacheHandler.ConCache module implements the Noizu.DomainObject.CacheHandler behaviour, providing cache handling functionality using ConCache. This module is responsible for managing cache operations such as getting, setting, and deleting cache entries for DomainObjects. It uses ConCache, an ETS-based caching library, as the underlying cache storage mechanism. Functions cache_key/4 : Generates a cache key for a given DomainObject, ref, context, and options. delete_cache/4 : Deletes a cache entry for a given DomainObject, ref, context, and options. pre_cache/4 : Pre-caches a DomainObject with a given ref, context, and options. get_cache/4 : Retrieves a cached DomainObject with a given ref, context, and options. Code Review ⚠️ Ensure proper error handling for cache operations.","ref":"Noizu.DomainObject.CacheHandler.ConCache.html","title":"Noizu.DomainObject.CacheHandler.ConCache","type":"module"},{"doc":"@TODO - Telemetry","ref":"Noizu.DomainObject.CacheHandler.ConCache.html#__cache_miss__/6","title":"Noizu.DomainObject.CacheHandler.ConCache.__cache_miss__/6","type":"function"},{"doc":"Generates a cache key based on the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns : The generated cache key. : An error and reason for the failure.","ref":"Noizu.DomainObject.CacheHandler.ConCache.html#cache_key/4","title":"Noizu.DomainObject.CacheHandler.ConCache.cache_key/4","type":"function"},{"doc":"Deletes a cache entry for the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns :ok: The cache entry was deleted successfully. : An error occurred due to configuration issues. error: Any other error that may occur during cache deletion.","ref":"Noizu.DomainObject.CacheHandler.ConCache.html#delete_cache/4","title":"Noizu.DomainObject.CacheHandler.ConCache.delete_cache/4","type":"function"},{"doc":"Retrieves a cached DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns nil: The cache entry was not found or had an issue. : An error and reason for the failure. v: The cached DomainObject.","ref":"Noizu.DomainObject.CacheHandler.ConCache.html#get_cache/4","title":"Noizu.DomainObject.CacheHandler.ConCache.get_cache/4","type":"function"},{"doc":"Pre-caches a DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns ref: The reference to the pre-cached DomainObject. error: An error that may occur during pre-caching the DomainObject.","ref":"Noizu.DomainObject.CacheHandler.ConCache.html#pre_cache/4","title":"Noizu.DomainObject.CacheHandler.ConCache.pre_cache/4","type":"function"},{"doc":"The Noizu.DomainObject.CacheHandler.Disabled module implements the Noizu.DomainObject.CacheHandler behaviour, providing cache handling functionality for disabled caching. This module is used when caching is disabled for DomainObjects. It simply returns default values and does not perform any caching operations. Functions cache_key/4 : Generates a cache key for a given DomainObject, ref, context, and options. delete_cache/4 : Deletes a cache entry for a given DomainObject, ref, context, and options. pre_cache/4 : Pre-caches a DomainObject with a given ref, context, and options. get_cache/4 : Retrieves a cached DomainObject with a given ref, context, and options. Code Review ✅ No code review notes.","ref":"Noizu.DomainObject.CacheHandler.Disabled.html","title":"Noizu.DomainObject.CacheHandler.Disabled","type":"module"},{"doc":"Generates a cache key based on the given DomainObject, ref, context, and options. Params _m: The DomainObject module. _ref: The reference to the DomainObject. _context: The request context. _options: A keyword list of options. Returns nil: Caching is disabled, so no cache key is generated.","ref":"Noizu.DomainObject.CacheHandler.Disabled.html#cache_key/4","title":"Noizu.DomainObject.CacheHandler.Disabled.cache_key/4","type":"function"},{"doc":"Deletes a cache entry for the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns true: The cache entry was deleted successfully.","ref":"Noizu.DomainObject.CacheHandler.Disabled.html#delete_cache/4","title":"Noizu.DomainObject.CacheHandler.Disabled.delete_cache/4","type":"function"},{"doc":"Retrieves a cached DomainObject with the given ref, context, and options. Params _m: The DomainObject module. nil: The reference to the DomainObject is nil. _context: The request context. _options: A keyword list of options. Returns nil: Caching is disabled, so no cache entry is retrieved.","ref":"Noizu.DomainObject.CacheHandler.Disabled.html#get_cache/4","title":"Noizu.DomainObject.CacheHandler.Disabled.get_cache/4","type":"function"},{"doc":"Pre-caches a DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns ref: The reference to the pre-cached DomainObject.","ref":"Noizu.DomainObject.CacheHandler.Disabled.html#pre_cache/4","title":"Noizu.DomainObject.CacheHandler.Disabled.pre_cache/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.CacheHandler.FastGlobal.html","title":"Noizu.DomainObject.CacheHandler.FastGlobal","type":"module"},{"doc":"Generates a cache key based on the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns sref: The serialized reference of the DomainObject, used as the cache key. nil: The cache key could not be generated.","ref":"Noizu.DomainObject.CacheHandler.FastGlobal.html#cache_key/4","title":"Noizu.DomainObject.CacheHandler.FastGlobal.cache_key/4","type":"function"},{"doc":"Deletes a cache entry for the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns :ok: The cache entry was deleted successfully. error: An error that may occur during cache deletion.","ref":"Noizu.DomainObject.CacheHandler.FastGlobal.html#delete_cache/4","title":"Noizu.DomainObject.CacheHandler.FastGlobal.delete_cache/4","type":"function"},{"doc":"Retrieves a cached DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns The cached DomainObject.","ref":"Noizu.DomainObject.CacheHandler.FastGlobal.html#get_cache/4","title":"Noizu.DomainObject.CacheHandler.FastGlobal.get_cache/4","type":"function"},{"doc":"Pre-caches a DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns ref: The reference to the pre-cached DomainObject.","ref":"Noizu.DomainObject.CacheHandler.FastGlobal.html#pre_cache/4","title":"Noizu.DomainObject.CacheHandler.FastGlobal.pre_cache/4","type":"function"},{"doc":"The Noizu.DomainObject.CacheHandler.Redis module implements the Noizu.DomainObject.CacheHandler behaviour, providing cache handling functionality using Redis. This module is responsible for managing cache operations such as getting, setting, and deleting cache entries for DomainObjects. It uses Redis as the underlying cache storage mechanism. Functions cache_key/4 : Generates a cache key for a given DomainObject, ref, context, and options. delete_cache/4 : Deletes a cache entry for a given DomainObject, ref, context, and options. pre_cache/4 : Pre-caches a DomainObject with a given ref, context, and options. get_cache/4 : Retrieves a cached DomainObject with a given ref, context, and options. Code Review ⚠️ Ensure proper error handling for cache operations.","ref":"Noizu.DomainObject.CacheHandler.Redis.html","title":"Noizu.DomainObject.CacheHandler.Redis","type":"module"},{"doc":"@TODO - Telemetry","ref":"Noizu.DomainObject.CacheHandler.Redis.html#__cache_miss__/6","title":"Noizu.DomainObject.CacheHandler.Redis.__cache_miss__/6","type":"function"},{"doc":"Generates a cache key based on the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns : The generated cache key. : An error and reason for the failure.","ref":"Noizu.DomainObject.CacheHandler.Redis.html#cache_key/4","title":"Noizu.DomainObject.CacheHandler.Redis.cache_key/4","type":"function"},{"doc":"Deletes a cache entry for the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns :ok: The cache entry was deleted successfully. : An error occurred due to configuration issues. error: Any other error that may occur during cache deletion.","ref":"Noizu.DomainObject.CacheHandler.Redis.html#delete_cache/4","title":"Noizu.DomainObject.CacheHandler.Redis.delete_cache/4","type":"function"},{"doc":"Retrieves a cached DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns The cached DomainObject. error: An error that may occur during cache retrieval.","ref":"Noizu.DomainObject.CacheHandler.Redis.html#get_cache/4","title":"Noizu.DomainObject.CacheHandler.Redis.get_cache/4","type":"function"},{"doc":"Pre-caches a DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns ref: The reference to the pre-cached DomainObject. error: An error that may occur during pre-caching the DomainObject.","ref":"Noizu.DomainObject.CacheHandler.Redis.html#pre_cache/4","title":"Noizu.DomainObject.CacheHandler.Redis.pre_cache/4","type":"function"},{"doc":"The Noizu.DomainObject.CacheHandler.RedisJson module implements the Noizu.DomainObject.CacheHandler behaviour, providing cache handling functionality using Redis with JSON serialization. This module is responsible for managing cache operations such as getting, setting, and deleting cache entries for DomainObjects. It uses Redis with JSON serialization as the underlying cache storage mechanism. Functions cache_key/4 : Generates a cache key for a given DomainObject, ref, context, and options. delete_cache/4 : Deletes a cache entry for a given DomainObject, ref, context, and options. pre_cache/4 : Pre-caches a DomainObject with a given ref, context, and options. get_cache/4 : Retrieves a cached DomainObject with a given ref, context, and options. Code Review ⚠️ Ensure proper error handling for cache operations.","ref":"Noizu.DomainObject.CacheHandler.RedisJson.html","title":"Noizu.DomainObject.CacheHandler.RedisJson","type":"module"},{"doc":"@TODO - Telemetry","ref":"Noizu.DomainObject.CacheHandler.RedisJson.html#__cache_miss__/6","title":"Noizu.DomainObject.CacheHandler.RedisJson.__cache_miss__/6","type":"function"},{"doc":"Generates a cache key based on the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns : The generated cache key. : An error and reason for the failure.","ref":"Noizu.DomainObject.CacheHandler.RedisJson.html#cache_key/4","title":"Noizu.DomainObject.CacheHandler.RedisJson.cache_key/4","type":"function"},{"doc":"Deletes a cache entry for the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns :ok: The cache entry was deleted successfully. : An error occurred due to configuration issues. error: Any other error that may occur during cache deletion.","ref":"Noizu.DomainObject.CacheHandler.RedisJson.html#delete_cache/4","title":"Noizu.DomainObject.CacheHandler.RedisJson.delete_cache/4","type":"function"},{"doc":"Retrieves a cached DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns The cached DomainObject. error: An error that may occur during cache retrieval.","ref":"Noizu.DomainObject.CacheHandler.RedisJson.html#get_cache/4","title":"Noizu.DomainObject.CacheHandler.RedisJson.get_cache/4","type":"function"},{"doc":"Pre-caches a DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns ref: The reference to the pre-cached DomainObject. error: An error that may occur during pre-caching the DomainObject.","ref":"Noizu.DomainObject.CacheHandler.RedisJson.html#pre_cache/4","title":"Noizu.DomainObject.CacheHandler.RedisJson.pre_cache/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.CacheHandler.RocksDB.html","title":"Noizu.DomainObject.CacheHandler.RocksDB","type":"module"},{"doc":"@TODO - Telemetry","ref":"Noizu.DomainObject.CacheHandler.RocksDB.html#__cache_miss__/6","title":"Noizu.DomainObject.CacheHandler.RocksDB.__cache_miss__/6","type":"function"},{"doc":"Generates a cache key based on the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. _context: The request context. _options: A keyword list of options. Returns The cache key.","ref":"Noizu.DomainObject.CacheHandler.RocksDB.html#cache_key/4","title":"Noizu.DomainObject.CacheHandler.RocksDB.cache_key/4","type":"function"},{"doc":"Deletes a cache entry for the given DomainObject, ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns :ok: The cache entry was deleted successfully. : An error occurred due to configuration issues. error: Any other error that may occur during cache deletion.","ref":"Noizu.DomainObject.CacheHandler.RocksDB.html#delete_cache/4","title":"Noizu.DomainObject.CacheHandler.RocksDB.delete_cache/4","type":"function"},{"doc":"Retrieves a cached DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns The cached DomainObject.","ref":"Noizu.DomainObject.CacheHandler.RocksDB.html#get_cache/4","title":"Noizu.DomainObject.CacheHandler.RocksDB.get_cache/4","type":"function"},{"doc":"Pre-caches a DomainObject with the given ref, context, and options. Params m: The DomainObject module. ref: The reference to the DomainObject. context: The request context. options: A keyword list of options. Returns ref: The reference to the pre-cached DomainObject. error: An error that may occur during pre-caching the DomainObject.","ref":"Noizu.DomainObject.CacheHandler.RocksDB.html#pre_cache/4","title":"Noizu.DomainObject.CacheHandler.RocksDB.pre_cache/4","type":"function"},{"doc":"The Noizu.DomainObject.Compound.IdentifierType module implements the Noizu.DomainObject.IdentifierTypeBehaviour behaviour for compound identifier types used in the Noizu.DomainObject framework. This module provides functions for validating, encoding, and decoding compound identifiers. Compound identifiers are tuples that contain multiple components, each representing a different part of the identifier. Callbacks type/0 : Returns the type of the identifier (compound). __valid_identifier__/2 : Checks if a provided value is correct for the compound identifier type. __sref_section_regex__/1 : Prepares a regex snippet for matching the compound identifier. __id_to_string__/2 : Encodes a valid compound identifier into a string for sref encoding. __string_to_id__/2 : Decodes a string into the compound identifier type.","ref":"Noizu.DomainObject.Compound.IdentifierType.html","title":"Noizu.DomainObject.Compound.IdentifierType","type":"module"},{"doc":"Encodes a valid compound identifier into a string for sref encoding. Params identifier: The valid identifier value to encode. configuration: Additional configuration for the identifier. Returns : If the identifier is encoded successfully. : If there is an error encoding the identifier, with the reason for the failure.","ref":"Noizu.DomainObject.Compound.IdentifierType.html#__id_to_string__/2","title":"Noizu.DomainObject.Compound.IdentifierType.__id_to_string__/2","type":"function"},{"doc":"Prepares a regex snippet for matching the compound identifier. Params configuration: Additional configuration for the identifier. Returns : If the regex snippet is prepared successfully. : If there is an error preparing the regex snippet, with the reason for the failure.","ref":"Noizu.DomainObject.Compound.IdentifierType.html#__sref_section_regex__/1","title":"Noizu.DomainObject.Compound.IdentifierType.__sref_section_regex__/1","type":"function"},{"doc":"Decodes a string into the compound identifier type. Params string: The string to decode into the compound identifier type. configuration: Additional configuration for the identifier. Returns : If the string is decoded successfully into the compound identifier type. : If there is an error decoding the string, with the reason for the failure.","ref":"Noizu.DomainObject.Compound.IdentifierType.html#__string_to_id__/2","title":"Noizu.DomainObject.Compound.IdentifierType.__string_to_id__/2","type":"function"},{"doc":"Checks if the provided value is correct for the compound identifier type. Params identifier: The identifier value to check. configuration: Additional configuration for the identifier. Returns :ok: If the identifier value is correct. : If the identifier value is incorrect, with the reason for the failure.","ref":"Noizu.DomainObject.Compound.IdentifierType.html#__valid_identifier__/2","title":"Noizu.DomainObject.Compound.IdentifierType.__valid_identifier__/2","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.IdentifierTypeBehaviour.type/0 .","ref":"Noizu.DomainObject.Compound.IdentifierType.html#type/0","title":"Noizu.DomainObject.Compound.IdentifierType.type/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#__sphinx_bits__/3","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#__sphinx_default__/3","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#__sphinx_encoded__/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#__sphinx_encoding__/3","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#__sphinx_expand_field__/3","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#__sphinx_field__/0","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#__sphinx_has_default__/3","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.__sphinx_has_default__/3","type":"function"},{"doc":"Format instance of type for Inspect output. - strip fields, simplify object, etc.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#__strip_inspect__/3","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.__strip_inspect__/3","type":"function"},{"doc":"Cast database record fields back into entity.field of this type. For example to reconstruct a TimeStamp entity by grabbing the RDMS table's created_on, modified_on, deleted_on fields.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#cast/6","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.cast/6","type":"function"},{"doc":"Determine if two instances of this type match. Possibly ignoring erroneous fields such as time stamps/transient fields, etc.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#compare/2","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.compare/2","type":"function"},{"doc":"Cast database record fields to database format.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#dump/7","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.dump/7","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.TypeHandler.Behaviour.from_json/5 .","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#from_json/5","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.from_json/5","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#has_query_permission?/5","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.has_query_permission?/5","type":"function"},{"doc":"","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#import/2","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.import/2","type":"function"},{"doc":"post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#post_create_callback/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.post_create_callback/4","type":"function"},{"doc":"(Dirty) post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#post_create_callback!/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.post_create_callback!/4","type":"function"},{"doc":"post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#post_delete_callback/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.post_delete_callback/4","type":"function"},{"doc":"(Dirty) post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#post_delete_callback!/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.post_delete_callback!/4","type":"function"},{"doc":"Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#post_get_callback/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.post_get_callback/4","type":"function"},{"doc":"(Dirty) Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#post_get_callback!/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.post_get_callback!/4","type":"function"},{"doc":"post update callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#post_update_callback/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.post_update_callback/4","type":"function"},{"doc":"(Dirty) post update callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#post_update_callback!/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.post_update_callback!/4","type":"function"},{"doc":"pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#pre_create_callback/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.pre_create_callback/4","type":"function"},{"doc":"(Dirty) pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#pre_create_callback!/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.pre_create_callback!/4","type":"function"},{"doc":"pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#pre_delete_callback/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.pre_delete_callback/4","type":"function"},{"doc":"(Dirty) pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#pre_delete_callback!/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.pre_delete_callback!/4","type":"function"},{"doc":"pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#pre_update_callback/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.pre_update_callback/4","type":"function"},{"doc":"(Dirty) pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#pre_update_callback!/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.pre_update_callback!/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#sync/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.sync/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#sync!/4","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.sync!/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.html#to_json/6","title":"Noizu.DomainObject.DateTime.Millisecond.TypeHandler.to_json/6","type":"function"},{"doc":"","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html","title":"Noizu.DomainObject.DateTime.Second.TypeHandler","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#__sphinx_bits__/3","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#__sphinx_default__/3","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#__sphinx_encoded__/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#__sphinx_encoding__/3","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#__sphinx_expand_field__/3","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#__sphinx_field__/0","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#__sphinx_has_default__/3","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.__sphinx_has_default__/3","type":"function"},{"doc":"Format instance of type for Inspect output. - strip fields, simplify object, etc.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#__strip_inspect__/3","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.__strip_inspect__/3","type":"function"},{"doc":"Cast database record fields back into entity.field of this type. For example to reconstruct a TimeStamp entity by grabbing the RDMS table's created_on, modified_on, deleted_on fields.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#cast/6","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.cast/6","type":"function"},{"doc":"Determine if two instances of this type match. Possibly ignoring erroneous fields such as time stamps/transient fields, etc.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#compare/2","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.compare/2","type":"function"},{"doc":"Cast database record fields to database format.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#dump/7","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.dump/7","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.TypeHandler.Behaviour.from_json/5 .","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#from_json/5","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.from_json/5","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#has_query_permission?/5","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.has_query_permission?/5","type":"function"},{"doc":"","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#import/2","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.import/2","type":"function"},{"doc":"post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#post_create_callback/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.post_create_callback/4","type":"function"},{"doc":"(Dirty) post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#post_create_callback!/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.post_create_callback!/4","type":"function"},{"doc":"post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#post_delete_callback/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.post_delete_callback/4","type":"function"},{"doc":"(Dirty) post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#post_delete_callback!/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.post_delete_callback!/4","type":"function"},{"doc":"Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#post_get_callback/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.post_get_callback/4","type":"function"},{"doc":"(Dirty) Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#post_get_callback!/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.post_get_callback!/4","type":"function"},{"doc":"post update callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#post_update_callback/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.post_update_callback/4","type":"function"},{"doc":"(Dirty) post update callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#post_update_callback!/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.post_update_callback!/4","type":"function"},{"doc":"pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#pre_create_callback/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.pre_create_callback/4","type":"function"},{"doc":"(Dirty) pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#pre_create_callback!/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.pre_create_callback!/4","type":"function"},{"doc":"pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#pre_delete_callback/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.pre_delete_callback/4","type":"function"},{"doc":"(Dirty) pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#pre_delete_callback!/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.pre_delete_callback!/4","type":"function"},{"doc":"pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#pre_update_callback/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.pre_update_callback/4","type":"function"},{"doc":"(Dirty) pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#pre_update_callback!/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.pre_update_callback!/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#sync/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.sync/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#sync!/4","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.sync!/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.DateTime.Second.TypeHandler.html#to_json/6","title":"Noizu.DomainObject.DateTime.Second.TypeHandler.to_json/6","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html","title":"Noizu.DomainObject.EncodedPath","type":"module"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#convert_matrix_to_path/1","title":"Noizu.DomainObject.EncodedPath.convert_matrix_to_path/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#convert_matrix_to_path/2","title":"Noizu.DomainObject.EncodedPath.convert_matrix_to_path/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#convert_path_to_matrix/1","title":"Noizu.DomainObject.EncodedPath.convert_path_to_matrix/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#convert_path_to_tuple/1","title":"Noizu.DomainObject.EncodedPath.convert_path_to_tuple/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#convert_tuple_to_path/1","title":"Noizu.DomainObject.EncodedPath.convert_tuple_to_path/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#convert_tuple_to_path/2","title":"Noizu.DomainObject.EncodedPath.convert_tuple_to_path/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#ecto_entity?/0","title":"Noizu.DomainObject.EncodedPath.ecto_entity?/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#ecto_identifier/1","title":"Noizu.DomainObject.EncodedPath.ecto_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#from_json/4","title":"Noizu.DomainObject.EncodedPath.from_json/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#index_identifier/1","title":"Noizu.DomainObject.EncodedPath.index_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#inner_from_json/1","title":"Noizu.DomainObject.EncodedPath.inner_from_json/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#leaf_node/1","title":"Noizu.DomainObject.EncodedPath.leaf_node/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#multiply_matrix/2","title":"Noizu.DomainObject.EncodedPath.multiply_matrix/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#new/1","title":"Noizu.DomainObject.EncodedPath.new/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#parent_path/1","title":"Noizu.DomainObject.EncodedPath.parent_path/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#path_string/1","title":"Noizu.DomainObject.EncodedPath.path_string/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#position_matrix/1","title":"Noizu.DomainObject.EncodedPath.position_matrix/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#source/1","title":"Noizu.DomainObject.EncodedPath.source/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#universal_identifier/1","title":"Noizu.DomainObject.EncodedPath.universal_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.html#vsn/0","title":"Noizu.DomainObject.EncodedPath.vsn/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html","title":"Noizu.DomainObject.EncodedPath.TypeHandler","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#__sphinx_bits__/3","title":"Noizu.DomainObject.EncodedPath.TypeHandler.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#__sphinx_default__/3","title":"Noizu.DomainObject.EncodedPath.TypeHandler.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#__sphinx_encoded__/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#__sphinx_encoding__/3","title":"Noizu.DomainObject.EncodedPath.TypeHandler.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#__sphinx_expand_field__/3","title":"Noizu.DomainObject.EncodedPath.TypeHandler.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#__sphinx_field__/0","title":"Noizu.DomainObject.EncodedPath.TypeHandler.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#__sphinx_has_default__/3","title":"Noizu.DomainObject.EncodedPath.TypeHandler.__sphinx_has_default__/3","type":"function"},{"doc":"Format instance of type for Inspect output. - strip fields, simplify object, etc.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#__strip_inspect__/3","title":"Noizu.DomainObject.EncodedPath.TypeHandler.__strip_inspect__/3","type":"function"},{"doc":"Cast database record fields back into entity.field of this type. For example to reconstruct a TimeStamp entity by grabbing the RDMS table's created_on, modified_on, deleted_on fields.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#cast/6","title":"Noizu.DomainObject.EncodedPath.TypeHandler.cast/6","type":"function"},{"doc":"Determine if two instances of this type match. Possibly ignoring erroneous fields such as time stamps/transient fields, etc.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#compare/2","title":"Noizu.DomainObject.EncodedPath.TypeHandler.compare/2","type":"function"},{"doc":"Cast database record fields to database format.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#dump/7","title":"Noizu.DomainObject.EncodedPath.TypeHandler.dump/7","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.TypeHandler.Behaviour.from_json/5 .","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#from_json/5","title":"Noizu.DomainObject.EncodedPath.TypeHandler.from_json/5","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#has_query_permission?/5","title":"Noizu.DomainObject.EncodedPath.TypeHandler.has_query_permission?/5","type":"function"},{"doc":"post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#post_create_callback/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.post_create_callback/4","type":"function"},{"doc":"(Dirty) post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#post_create_callback!/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.post_create_callback!/4","type":"function"},{"doc":"post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#post_delete_callback/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.post_delete_callback/4","type":"function"},{"doc":"(Dirty) post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#post_delete_callback!/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.post_delete_callback!/4","type":"function"},{"doc":"Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#post_get_callback/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.post_get_callback/4","type":"function"},{"doc":"(Dirty) Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#post_get_callback!/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.post_get_callback!/4","type":"function"},{"doc":"post update callback for entity fields of this type.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#post_update_callback/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.post_update_callback/4","type":"function"},{"doc":"(Dirty) post update callback for entity fields of this type.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#post_update_callback!/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.post_update_callback!/4","type":"function"},{"doc":"pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#pre_create_callback/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.pre_create_callback/4","type":"function"},{"doc":"(Dirty) pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#pre_create_callback!/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.pre_create_callback!/4","type":"function"},{"doc":"pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#pre_delete_callback/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.pre_delete_callback/4","type":"function"},{"doc":"(Dirty) pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#pre_delete_callback!/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.pre_delete_callback!/4","type":"function"},{"doc":"pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#pre_update_callback/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.pre_update_callback/4","type":"function"},{"doc":"(Dirty) pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#pre_update_callback!/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.pre_update_callback!/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#sync/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.sync/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#sync!/4","title":"Noizu.DomainObject.EncodedPath.TypeHandler.sync!/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.EncodedPath.TypeHandler.html#to_json/6","title":"Noizu.DomainObject.EncodedPath.TypeHandler.to_json/6","type":"function"},{"doc":"The Noizu.DomainObject.Float.IdentifierType module implements the Noizu.DomainObject.IdentifierTypeBehaviour for float identifier types used in the Noizu.DomainObject framework. This module provides functions for validating, encoding, and decoding float identifiers. Callbacks type/0 : Returns the type of the identifier. __valid_identifier__/2 : Checks if a provided value is correct for the identifier type. __sref_section_regex__/1 : Prepares a regex snippet for matching the identifier. __id_to_string__/2 : Encodes a valid identifier into a string for sref encoding. __string_to_id__/2 : Decodes a string into the identifier type.","ref":"Noizu.DomainObject.Float.IdentifierType.html","title":"Noizu.DomainObject.Float.IdentifierType","type":"module"},{"doc":"Encodes a valid float identifier into a string for sref encoding. Params identifier: The valid identifier value to encode. configuration: Additional configuration for the identifier. Returns : If the identifier is encoded successfully. : If there is an error encoding the identifier, with the reason for the failure.","ref":"Noizu.DomainObject.Float.IdentifierType.html#__id_to_string__/2","title":"Noizu.DomainObject.Float.IdentifierType.__id_to_string__/2","type":"function"},{"doc":"Prepares a regex snippet for matching the float identifier. Params configuration: Additional configuration for the identifier. Returns : If the regex snippet is prepared successfully. : If there is an error preparing the regex snippet, with the reason for the failure.","ref":"Noizu.DomainObject.Float.IdentifierType.html#__sref_section_regex__/1","title":"Noizu.DomainObject.Float.IdentifierType.__sref_section_regex__/1","type":"function"},{"doc":"Decodes a string into the float identifier type. Params string: The string to decode into the float identifier type. configuration: Additional configuration for the identifier. Returns : If the string is decoded successfully into the float identifier type. : If there is an error decoding the string, with the reason for the failure.","ref":"Noizu.DomainObject.Float.IdentifierType.html#__string_to_id__/2","title":"Noizu.DomainObject.Float.IdentifierType.__string_to_id__/2","type":"function"},{"doc":"Checks if the provided value is correct for the float identifier type. Params identifier: The identifier value to check. configuration: Additional configuration for the identifier. Returns :ok: If the identifier value is correct. : If the identifier value is incorrect, with the reason for the failure.","ref":"Noizu.DomainObject.Float.IdentifierType.html#__valid_identifier__/2","title":"Noizu.DomainObject.Float.IdentifierType.__valid_identifier__/2","type":"function"},{"doc":"Returns the type of the identifier. Returns :float: The type of the identifier.","ref":"Noizu.DomainObject.Float.IdentifierType.html#type/0","title":"Noizu.DomainObject.Float.IdentifierType.type/0","type":"function"},{"doc":"The Noizu.DomainObject.Hash.IdentifierType module implements the Noizu.DomainObject.IdentifierTypeBehaviour behaviour for hash identifier types used in the Noizu.DomainObject framework. Callbacks type/0 : Returns the type of the identifier. __valid_identifier__/2 : Checks if a provided value is correct for the hash identifier type. __sref_section_regex__/1 : Prepares a regex snippet for matching the hash identifier. __id_to_string__/2 : Encodes a valid hash identifier into a string for sref encoding. __string_to_id__/2 : Decodes a string into the hash identifier type.","ref":"Noizu.DomainObject.Hash.IdentifierType.html","title":"Noizu.DomainObject.Hash.IdentifierType","type":"module"},{"doc":"Encodes a valid hash identifier into a string for sref encoding. Params identifier: The valid identifier value to encode. _c: Additional configuration for the identifier. Returns : If the identifier is encoded successfully. }: If there is an error encoding the identifier, with the reason for the failure.","ref":"Noizu.DomainObject.Hash.IdentifierType.html#__id_to_string__/2","title":"Noizu.DomainObject.Hash.IdentifierType.__id_to_string__/2","type":"function"},{"doc":"Prepares a regex snippet for matching the hash identifier. Params _c: Additional configuration for the identifier. Returns : If the regex snippet is prepared successfully. : If there is an error preparing the regex snippet, with the reason for the failure.","ref":"Noizu.DomainObject.Hash.IdentifierType.html#__sref_section_regex__/1","title":"Noizu.DomainObject.Hash.IdentifierType.__sref_section_regex__/1","type":"function"},{"doc":"Decodes a string into the hash identifier type. Params identifier: The string to decode into the hash identifier type. _c: Additional configuration for the identifier. Returns : If the string is decoded successfully into the hash identifier type. }: If there is an error decoding the string, with the reason for the failure.","ref":"Noizu.DomainObject.Hash.IdentifierType.html#__string_to_id__/2","title":"Noizu.DomainObject.Hash.IdentifierType.__string_to_id__/2","type":"function"},{"doc":"Checks if the provided value is correct for the hash identifier type. Params identifier: The identifier value to check. _c: Additional configuration for the identifier. Returns :ok: If the identifier value is correct. }: If the identifier value is incorrect, with the reason for the failure.","ref":"Noizu.DomainObject.Hash.IdentifierType.html#__valid_identifier__/2","title":"Noizu.DomainObject.Hash.IdentifierType.__valid_identifier__/2","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.IdentifierTypeBehaviour.type/0 .","ref":"Noizu.DomainObject.Hash.IdentifierType.html#type/0","title":"Noizu.DomainObject.Hash.IdentifierType.type/0","type":"function"},{"doc":"IdentifierType Behavior The Noizu.DomainObject.IdentifierTypeBehaviour module defines the behaviour for identifier types used in the Noizu.DomainObject framework. It provides functions for encoding, decoding, validating, and preparing regex patterns for identifier types. Callbacks type/0 : Returns the type of the identifier. __valid_identifier__/2 : Checks if a provided value is correct for the identifier type. __sref_section_regex__/1 : Prepares a regex snippet for matching the identifier. __id_to_string__/2 : Encodes a valid identifier into a string for sref encoding. __string_to_id__/2 : Decodes a string into the identifier type. Example defmodule DomainObject do defmodule Entity do Noizu.DomainObject . noizu_entity ( ) do identifier :atom , constraint : [ :foo , :bar , :bop ] public_field :content end end end Example defmodule MyDomainObject do defmodule Entity do @behaviour Noizu.DomainObject.IdentifierTypeBehaviour @impl true def type , do : :atom @impl true def __valid_identifier__ ( identifier , configuration ) do # Implementation logic end @impl true def __sref_section_regex__ ( configuration ) do # Implementation logic end @impl true def __id_to_string__ ( identifier , configuration ) do # Implementation logic end @impl true def __string_to_id__ ( string , configuration ) do # Implementation logic end end end","ref":"Noizu.DomainObject.IdentifierTypeBehaviour.html","title":"Noizu.DomainObject.IdentifierTypeBehaviour","type":"behaviour"},{"doc":"Encode valid identifier in string form for sref encoding.","ref":"Noizu.DomainObject.IdentifierTypeBehaviour.html#c:__id_to_string__/2","title":"Noizu.DomainObject.IdentifierTypeBehaviour.__id_to_string__/2","type":"callback"},{"doc":"Prepare regex snippet for matching identifier","ref":"Noizu.DomainObject.IdentifierTypeBehaviour.html#c:__sref_section_regex__/1","title":"Noizu.DomainObject.IdentifierTypeBehaviour.__sref_section_regex__/1","type":"callback"},{"doc":"Decode string into identifier type.","ref":"Noizu.DomainObject.IdentifierTypeBehaviour.html#c:__string_to_id__/2","title":"Noizu.DomainObject.IdentifierTypeBehaviour.__string_to_id__/2","type":"callback"},{"doc":"Check if provided value is correct for identifier type.","ref":"Noizu.DomainObject.IdentifierTypeBehaviour.html#c:__valid_identifier__/2","title":"Noizu.DomainObject.IdentifierTypeBehaviour.__valid_identifier__/2","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.IdentifierTypeBehaviour.html#c:type/0","title":"Noizu.DomainObject.IdentifierTypeBehaviour.type/0","type":"callback"},{"doc":"The Noizu.DomainObject.IdentifierTypeResolver module provides plumbing and default logic for built-in type handlers in the Noizu.DomainObject framework. This module acts as a resolver for identifier type handlers, allowing dynamic resolution of the appropriate handler for a given identifier type. Functions __valid_identifier__/2 : Calls the appropriate handler's __valid_identifier__/2 function. __sref_section_regex__/1 : Calls the appropriate handler's __sref_section_regex__/1 function. __id_to_string__/2 : Calls the appropriate handler's __id_to_string__/2 function. __string_to_id__/2 : Calls the appropriate handler's __string_to_id__/2 function. __built_in_identifier_type__/0 : Returns a map of built-in identifier types and their corresponding handlers. __registered_identifier_types__/0 : Returns the map of registered identifier types and their handlers. provider_configuration/1 : Retrieves the configuration for a given identifier type. resolver/3 : Resolves and executes the appropriate handler function for the given action, identifier type, and arguments.","ref":"Noizu.DomainObject.IdentifierTypeResolver.html","title":"Noizu.DomainObject.IdentifierTypeResolver","type":"module"},{"doc":"Returns a map of built-in identifier types and their corresponding handlers. Returns A map of built-in identifier types and their corresponding handler modules.","ref":"Noizu.DomainObject.IdentifierTypeResolver.html#__built_in_identifier_type__/0","title":"Noizu.DomainObject.IdentifierTypeResolver.__built_in_identifier_type__/0","type":"function"},{"doc":"Calls the appropriate handler's __id_to_string__/2 function. Params identifier: The identifier value. t: The identifier type. Returns The result of the __id_to_string__/2 function of the appropriate handler.","ref":"Noizu.DomainObject.IdentifierTypeResolver.html#__id_to_string__/2","title":"Noizu.DomainObject.IdentifierTypeResolver.__id_to_string__/2","type":"function"},{"doc":"@todo Should be prepared at runtime/compile time.","ref":"Noizu.DomainObject.IdentifierTypeResolver.html#__registered_identifier_types__/0","title":"Noizu.DomainObject.IdentifierTypeResolver.__registered_identifier_types__/0","type":"function"},{"doc":"Calls the appropriate handler's __sref_section_regex__/1 function. Params t: The identifier type. Returns The result of the __sref_section_regex__/1 function of the appropriate handler.","ref":"Noizu.DomainObject.IdentifierTypeResolver.html#__sref_section_regex__/1","title":"Noizu.DomainObject.IdentifierTypeResolver.__sref_section_regex__/1","type":"function"},{"doc":"Calls the appropriate handler's __string_to_id__/2 function. Params serialized_identifier: The serialized identifier value. t: The identifier type. Returns The result of the __string_to_id__/2 function of the appropriate handler.","ref":"Noizu.DomainObject.IdentifierTypeResolver.html#__string_to_id__/2","title":"Noizu.DomainObject.IdentifierTypeResolver.__string_to_id__/2","type":"function"},{"doc":"Calls the appropriate handler's __valid_identifier__/2 function. Params identifier: The identifier value. t: The identifier type. Returns The result of the __valid_identifier__/2 function of the appropriate handler.","ref":"Noizu.DomainObject.IdentifierTypeResolver.html#__valid_identifier__/2","title":"Noizu.DomainObject.IdentifierTypeResolver.__valid_identifier__/2","type":"function"},{"doc":"Retrieves the configuration for a given identifier type. Params t: The identifier type. Returns {p, c}: The handler module and its configuration.","ref":"Noizu.DomainObject.IdentifierTypeResolver.html#provider_configuration/1","title":"Noizu.DomainObject.IdentifierTypeResolver.provider_configuration/1","type":"function"},{"doc":"The Noizu.DomainObject.Integer.IdentifierType module implements the Noizu.DomainObject.IdentifierTypeBehaviour behaviour for integer identifier types used in the Noizu.DomainObject framework. Callbacks type/0 : Returns the type of the identifier. __valid_identifier__/2 : Checks if a provided value is correct for the identifier type. __sref_section_regex__/1 : Prepares a regex snippet for matching the identifier. __id_to_string__/2 : Encodes a valid identifier into a string for sref encoding. __string_to_id__/2 : Decodes a string into the identifier type.","ref":"Noizu.DomainObject.Integer.IdentifierType.html","title":"Noizu.DomainObject.Integer.IdentifierType","type":"module"},{"doc":"Encodes a valid identifier into a string for sref encoding. Params identifier: The valid identifier value to encode. configuration: Additional configuration for the identifier. Returns : If the identifier is encoded successfully. : If there is an error encoding the identifier, with the reason for the failure.","ref":"Noizu.DomainObject.Integer.IdentifierType.html#__id_to_string__/2","title":"Noizu.DomainObject.Integer.IdentifierType.__id_to_string__/2","type":"function"},{"doc":"Prepares a regex snippet for matching the identifier. Params configuration: Additional configuration for the identifier. Returns : If the regex snippet is prepared successfully. : If there is an error preparing the regex snippet, with the reason for the failure.","ref":"Noizu.DomainObject.Integer.IdentifierType.html#__sref_section_regex__/1","title":"Noizu.DomainObject.Integer.IdentifierType.__sref_section_regex__/1","type":"function"},{"doc":"Decodes a string into the identifier type. Params string: The string to decode into the identifier type. configuration: Additional configuration for the identifier. Returns : If the string is decoded successfully into the identifier type. : If there is an error decoding the string, with the reason for the failure.","ref":"Noizu.DomainObject.Integer.IdentifierType.html#__string_to_id__/2","title":"Noizu.DomainObject.Integer.IdentifierType.__string_to_id__/2","type":"function"},{"doc":"Checks if the provided value is correct for the identifier type. Params identifier: The identifier value to check. configuration: Additional configuration for the identifier. Returns :ok: If the identifier value is correct. : If the identifier value is incorrect, with the reason for the failure.","ref":"Noizu.DomainObject.Integer.IdentifierType.html#__valid_identifier__/2","title":"Noizu.DomainObject.Integer.IdentifierType.__valid_identifier__/2","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.IdentifierTypeBehaviour.type/0 .","ref":"Noizu.DomainObject.Integer.IdentifierType.html#type/0","title":"Noizu.DomainObject.Integer.IdentifierType.type/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalLink.html","title":"Noizu.DomainObject.Integer.UniversalLink","type":"module"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#__sphinx_bits__/3","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#__sphinx_default__/3","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#__sphinx_encoded__/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#__sphinx_encoding__/3","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#__sphinx_expand_field__/3","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#__sphinx_field__/0","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#__sphinx_has_default__/3","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.__sphinx_has_default__/3","type":"function"},{"doc":"Format instance of type for Inspect output. - strip fields, simplify object, etc.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#__strip_inspect__/3","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.__strip_inspect__/3","type":"function"},{"doc":"Cast database record fields back into entity.field of this type. For example to reconstruct a TimeStamp entity by grabbing the RDMS table's created_on, modified_on, deleted_on fields.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#cast/6","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.cast/6","type":"function"},{"doc":"Determine if two instances of this type match. Possibly ignoring erroneous fields such as time stamps/transient fields, etc.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#compare/2","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.compare/2","type":"function"},{"doc":"Cast database record fields to database format.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#dump/7","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.dump/7","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.TypeHandler.Behaviour.from_json/5 .","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#from_json/5","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.from_json/5","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#has_query_permission?/5","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.has_query_permission?/5","type":"function"},{"doc":"post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#post_create_callback/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.post_create_callback/4","type":"function"},{"doc":"(Dirty) post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#post_create_callback!/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.post_create_callback!/4","type":"function"},{"doc":"post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#post_delete_callback/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.post_delete_callback/4","type":"function"},{"doc":"(Dirty) post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#post_delete_callback!/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.post_delete_callback!/4","type":"function"},{"doc":"Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#post_get_callback/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.post_get_callback/4","type":"function"},{"doc":"(Dirty) Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#post_get_callback!/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.post_get_callback!/4","type":"function"},{"doc":"post update callback for entity fields of this type.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#post_update_callback/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.post_update_callback/4","type":"function"},{"doc":"(Dirty) post update callback for entity fields of this type.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#post_update_callback!/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.post_update_callback!/4","type":"function"},{"doc":"pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#pre_create_callback/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.pre_create_callback/4","type":"function"},{"doc":"(Dirty) pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#pre_create_callback!/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.pre_create_callback!/4","type":"function"},{"doc":"pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#pre_delete_callback/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.pre_delete_callback/4","type":"function"},{"doc":"(Dirty) pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#pre_delete_callback!/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.pre_delete_callback!/4","type":"function"},{"doc":"pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#pre_update_callback/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.pre_update_callback/4","type":"function"},{"doc":"(Dirty) pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#pre_update_callback!/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.pre_update_callback!/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#sync/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.sync/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#sync!/4","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.sync!/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.html#to_json/6","title":"Noizu.DomainObject.Integer.UniversalLink.TypeHandler.to_json/6","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html","title":"Noizu.DomainObject.Integer.UniversalReference","type":"module"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#ecto_identifier/1","title":"Noizu.DomainObject.Integer.UniversalReference.ecto_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#encode/1","title":"Noizu.DomainObject.Integer.UniversalReference.encode/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#entity/2","title":"Noizu.DomainObject.Integer.UniversalReference.entity/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#entity!/2","title":"Noizu.DomainObject.Integer.UniversalReference.entity!/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#entity_ok/2","title":"Noizu.DomainObject.Integer.UniversalReference.entity_ok/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#entity_ok!/2","title":"Noizu.DomainObject.Integer.UniversalReference.entity_ok!/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#erp_handler/0","title":"Noizu.DomainObject.Integer.UniversalReference.erp_handler/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#id/1","title":"Noizu.DomainObject.Integer.UniversalReference.id/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#id_ok/1","title":"Noizu.DomainObject.Integer.UniversalReference.id_ok/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#index_identifier/1","title":"Noizu.DomainObject.Integer.UniversalReference.index_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#lookup/1","title":"Noizu.DomainObject.Integer.UniversalReference.lookup/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#mysql_entity?/0","title":"Noizu.DomainObject.Integer.UniversalReference.mysql_entity?/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#record/2","title":"Noizu.DomainObject.Integer.UniversalReference.record/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#record!/2","title":"Noizu.DomainObject.Integer.UniversalReference.record!/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#ref/1","title":"Noizu.DomainObject.Integer.UniversalReference.ref/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#ref_ok/1","title":"Noizu.DomainObject.Integer.UniversalReference.ref_ok/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#resolve/1","title":"Noizu.DomainObject.Integer.UniversalReference.resolve/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#source/1","title":"Noizu.DomainObject.Integer.UniversalReference.source/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#sref/1","title":"Noizu.DomainObject.Integer.UniversalReference.sref/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#sref_ok/1","title":"Noizu.DomainObject.Integer.UniversalReference.sref_ok/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#universal_identifier/1","title":"Noizu.DomainObject.Integer.UniversalReference.universal_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.Integer.UniversalReference.html#t:t/0","title":"Noizu.DomainObject.Integer.UniversalReference.t/0","type":"type"},{"doc":"Ecto ENUM Custom Type.","ref":"Noizu.DomainObject.Integer.UniversalReference.Type.html","title":"Noizu.DomainObject.Integer.UniversalReference.Type","type":"module"},{"doc":"Casts to Ref.","ref":"Noizu.DomainObject.Integer.UniversalReference.Type.html#cast/1","title":"Noizu.DomainObject.Integer.UniversalReference.Type.cast/1","type":"function"},{"doc":"Same as cast/1 but raises Ecto.CastError on invalid arguments.","ref":"Noizu.DomainObject.Integer.UniversalReference.Type.html#cast!/1","title":"Noizu.DomainObject.Integer.UniversalReference.Type.cast!/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"Noizu.DomainObject.Integer.UniversalReference.Type.html#embed_as/1","title":"Noizu.DomainObject.Integer.UniversalReference.Type.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"Noizu.DomainObject.Integer.UniversalReference.Type.html#equal?/2","title":"Noizu.DomainObject.Integer.UniversalReference.Type.equal?/2","type":"function"},{"doc":"Callback implementation for Ecto.Type.load/1 .","ref":"Noizu.DomainObject.Integer.UniversalReference.Type.html#load/1","title":"Noizu.DomainObject.Integer.UniversalReference.Type.load/1","type":"function"},{"doc":"The Noizu.DomainObject.List.IdentifierType module implements the Noizu.DomainObject.IdentifierTypeBehaviour , providing identifier type handling functionality for list identifiers. Behaviour This module adheres to the Noizu.DomainObject.IdentifierTypeBehaviour behaviour.","ref":"Noizu.DomainObject.List.IdentifierType.html","title":"Noizu.DomainObject.List.IdentifierType","type":"module"},{"doc":"Encodes a valid identifier into a string for sref encoding. Params nil: The identifier value, which should not be nil. c: Additional configuration for the identifier. Returns }: If the identifier value is nil. : If the identifier is encoded successfully. : If there is an error encoding the identifier.","ref":"Noizu.DomainObject.List.IdentifierType.html#__id_to_string__/2","title":"Noizu.DomainObject.List.IdentifierType.__id_to_string__/2","type":"function"},{"doc":"Prepares a regex pattern for matching the identifier section in sref. Params c: Additional configuration for the identifier. Returns : If the regex pattern is prepared successfully. : If there is an error preparing the regex pattern.","ref":"Noizu.DomainObject.List.IdentifierType.html#__sref_section_regex__/1","title":"Noizu.DomainObject.List.IdentifierType.__sref_section_regex__/1","type":"function"},{"doc":"Decodes a string into the identifier type. Params identifier: The string to decode into the identifier type. _c: Additional configuration for the identifier. Returns }: If the identifier is not a string. }: If the identifier is invalid.","ref":"Noizu.DomainObject.List.IdentifierType.html#__string_to_id__/2","title":"Noizu.DomainObject.List.IdentifierType.__string_to_id__/2","type":"function"},{"doc":"Checks if the provided value is a valid identifier for the list identifier type. Params identifier: The identifier value to check. c: Additional configuration for the identifier. Returns :ok: If the identifier value is valid. }: If the identifier value is not a list.","ref":"Noizu.DomainObject.List.IdentifierType.html#__valid_identifier__/2","title":"Noizu.DomainObject.List.IdentifierType.__valid_identifier__/2","type":"function"},{"doc":"Returns the type of the identifier. Returns :list: The type of the identifier.","ref":"Noizu.DomainObject.List.IdentifierType.html#type/0","title":"Noizu.DomainObject.List.IdentifierType.type/0","type":"function"},{"doc":"The Noizu.DomainObject.Ref.IdentifierType module implements the Noizu.DomainObject.IdentifierTypeBehaviour behaviour, providing identifier type handling functionality for reference identifiers. This module is responsible for encoding, decoding, and validating reference identifiers used in the Noizu.DomainObject framework. Callbacks type/0 : Returns the type of the identifier. __valid_identifier__/2 : Checks if a provided value is correct for the identifier type. __sref_section_regex__/1 : Prepares a regex snippet for matching the identifier. __id_to_string__/2 : Encodes a valid identifier into a string for sref encoding. __string_to_id__/2 : Decodes a string into the identifier type.","ref":"Noizu.DomainObject.Ref.IdentifierType.html","title":"Noizu.DomainObject.Ref.IdentifierType","type":"module"},{"doc":"Encodes a valid identifier into a string for sref encoding. Params nil: The identifier value (unused). _c: Additional configuration for the identifier (unused). Returns : If the identifier is nil. : If the identifier is encoded successfully.","ref":"Noizu.DomainObject.Ref.IdentifierType.html#__id_to_string__/2","title":"Noizu.DomainObject.Ref.IdentifierType.__id_to_string__/2","type":"function"},{"doc":"Prepares a regex snippet for matching the identifier. Params _c: Additional configuration for the identifier (unused). Returns : If the regex snippet is prepared successfully. : If there is an error preparing the regex snippet, with the reason for the failure.","ref":"Noizu.DomainObject.Ref.IdentifierType.html#__sref_section_regex__/1","title":"Noizu.DomainObject.Ref.IdentifierType.__sref_section_regex__/1","type":"function"},{"doc":"Decodes a string into the identifier type. Params identifier: The string to decode into the identifier type. c: Additional configuration for the identifier. Returns : If the identifier is not in the whitelist or has an unsupported constraint. : If the string is decoded successfully into the identifier type.","ref":"Noizu.DomainObject.Ref.IdentifierType.html#__string_to_id__/2","title":"Noizu.DomainObject.Ref.IdentifierType.__string_to_id__/2","type":"function"},{"doc":"Checks if the provided value is correct for the identifier type. Params identifier: The identifier value to check. _c: Additional configuration for the identifier (unused). Returns :ok: If the identifier value is correct. : If the identifier value is incorrect, with the reason for the failure.","ref":"Noizu.DomainObject.Ref.IdentifierType.html#__valid_identifier__/2","title":"Noizu.DomainObject.Ref.IdentifierType.__valid_identifier__/2","type":"function"},{"doc":"Returns the type of the identifier.","ref":"Noizu.DomainObject.Ref.IdentifierType.html#type/0","title":"Noizu.DomainObject.Ref.IdentifierType.type/0","type":"function"},{"doc":"Provides details about a projects Domain Object Schema, provides sref string ERP support, etc.","ref":"Noizu.DomainObject.SchemaInfo.html","title":"Noizu.DomainObject.SchemaInfo","type":"module"},{"doc":"Returns Scaffolding Schema implementation.","ref":"Noizu.DomainObject.SchemaInfo.html#__noizu_schema_info__/3","title":"Noizu.DomainObject.SchemaInfo.__noizu_schema_info__/3","type":"function"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html","title":"Noizu.DomainObject.SchemaInfo.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:__all_properties__/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.__all_properties__/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:__cache_key__/1","title":"Noizu.DomainObject.SchemaInfo.Behaviour.__cache_key__/1","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:__flush__/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.__flush__/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:__flush__/1","title":"Noizu.DomainObject.SchemaInfo.Behaviour.__flush__/1","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:__nmid_index_list__/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.__nmid_index_list__/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:__noizu_info__/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.__noizu_info__/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:__noizu_info__/1","title":"Noizu.DomainObject.SchemaInfo.Behaviour.__noizu_info__/1","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:__valid_table_types__/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.__valid_table_types__/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:app/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.app/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:base_prefix/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.base_prefix/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:database_prefix/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.database_prefix/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:domain_objects/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.domain_objects/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:enums/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.enums/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:indexes/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.indexes/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:info/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.info/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:info/1","title":"Noizu.DomainObject.SchemaInfo.Behaviour.info/1","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:meta/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.meta/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:module_children/1","title":"Noizu.DomainObject.SchemaInfo.Behaviour.module_children/1","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:sref_map/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.sref_map/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Behaviour.html#c:tables/0","title":"Noizu.DomainObject.SchemaInfo.Behaviour.tables/0","type":"callback"},{"doc":"Default Implementation for the Schema behaviour.","ref":"Noizu.DomainObject.SchemaInfo.Default.html","title":"Noizu.DomainObject.SchemaInfo.Default","type":"module"},{"doc":"Return Map of Scaffolding Configuration Property Details","ref":"Noizu.DomainObject.SchemaInfo.Default.html#__noizu_info__/1","title":"Noizu.DomainObject.SchemaInfo.Default.__noizu_info__/1","type":"function"},{"doc":"Scaffolding Configuration Property Details (:type, :nmid_indexes, :indexes, :enums, :tables, :sref_map, ...)","ref":"Noizu.DomainObject.SchemaInfo.Default.html#__noizu_info__/2","title":"Noizu.DomainObject.SchemaInfo.Default.__noizu_info__/2","type":"function"},{"doc":"cache wrapper for filter_modules/2","ref":"Noizu.DomainObject.SchemaInfo.Default.html#cached_filter/3","title":"Noizu.DomainObject.SchemaInfo.Default.cached_filter/3","type":"function"},{"doc":"cache wrapper for filter_modules/3","ref":"Noizu.DomainObject.SchemaInfo.Default.html#cached_filter/4","title":"Noizu.DomainObject.SchemaInfo.Default.cached_filter/4","type":"function"},{"doc":"cache wrapper for filter_modules/4","ref":"Noizu.DomainObject.SchemaInfo.Default.html#cached_filter/5","title":"Noizu.DomainObject.SchemaInfo.Default.cached_filter/5","type":"function"},{"doc":"Return list of Scaffolding modules in app starting with base whose noizu_info (:type) matches the provided types filter.","ref":"Noizu.DomainObject.SchemaInfo.Default.html#filter_modules/3","title":"Noizu.DomainObject.SchemaInfo.Default.filter_modules/3","type":"function"},{"doc":"return list of Modules for app under base prefix of type type that match the user provided filter method.","ref":"Noizu.DomainObject.SchemaInfo.Default.html#filter_modules/4","title":"Noizu.DomainObject.SchemaInfo.Default.filter_modules/4","type":"function"},{"doc":"Return list of modules under app that begin with scope @example module_children(:my_app, MyApp.Store) &gt; [MyApp.Store.Electronics, MyApp.Store.Produce, MyApp.Store.FakeMustaches]","ref":"Noizu.DomainObject.SchemaInfo.Default.html#module_children/2","title":"Noizu.DomainObject.SchemaInfo.Default.module_children/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.SchemaInfo.Default.html#module_children_loaded/2","title":"Noizu.DomainObject.SchemaInfo.Default.module_children_loaded/2","type":"function"},{"doc":"Parse sref and return it's ref tuple or an Noizu.DomainObject.UnsupportedModule.ref if sref is correctly formatted but no handler is found in the sref_map() set. @example parse_sref(MyApp.ScaffoldingSchema, &quot;ref.foo-bar.1234&quot;) -&gt; {:ref, MyApp.FooBar.Entity, 1234} parse_sref(MyApp.ScaffoldingSchema, &quot;ref.foo-not-found.1234&quot;) -&gt; throw &quot;UnsupportedModule ref.foo-not-found.1234&quot; parse_sref(MyApp.ScaffoldingSchema, &quot;ref.bar[ref.foo-bar.1234, ref.user.noizu]&quot;) -&gt; {:ref, MyApp.Bar.Entity, [{:ref, MyApp.FooBar.Entity, 1234}, {:ref, MyApp.User.Entity, :noizu}] parse_sref(MyApp.ScaffoldingSchema, &quot;ref.cms{1234-1.1.3@3}&quot;) -&gt; {:ref, MyApp.CMS.Entity, {{:article, 1234}, {:version, {1,1,3}, {:revision, 3}}}","ref":"Noizu.DomainObject.SchemaInfo.Default.html#parse_sref/2","title":"Noizu.DomainObject.SchemaInfo.Default.parse_sref/2","type":"function"},{"doc":"Behaviour for converting DomainObject.Entity fields to search engine format. This module provides a behaviour and implementation for handling search indexing on domain objects. It defines a set of callbacks for encoding and expanding fields, and handling permissions and search clauses. Notes The SearchIndexHandler is responsible for handling search indexing on domain objects within the Noizu Elixir ecosystem. It is particularly useful when integrating a search engine like Sphinx to provide efficient and relevant search results for your application's data. Here's a breakdown of what the SearchIndexHandler does: How it works : It defines a behavior ( Noizu.DomainObject.SearchIndexHandler.Behaviour ) that requires implementing modules to provide specific callbacks. These callbacks are responsible for converting DomainObject.Entity fields to a format compatible with the search engine, handling permissions, and constructing search clauses. What it does : The SearchIndexHandler achieves the following functionalities: Expands domain object entity fields to match the search engine's index fields. Provides default values and field types for search engine compatibility. Encodes fields to a format understood by the search engine. Handles query permissions, determining if a specific field and filter combination is allowed for querying in a given context and options. Constructs search clauses with permission filters applied. Why it's useful : By implementing the SearchIndexHandler behavior in your modules, you can efficiently convert your application's data (DomainObject.Entity fields) to a format that can be indexed and queried by a search engine like Sphinx. This enables you to provide relevant and accurate search results in your application, improving user experience and overall functionality. In summary, the SearchIndexHandler is a crucial component for integrating search functionality within an Elixir application. It handles the conversion of domain object data to a search engine-friendly format, manages query permissions, and constructs search clauses while adhering to the defined behavior.","ref":"Noizu.DomainObject.SearchIndexHandler.html","title":"Noizu.DomainObject.SearchIndexHandler","type":"module"},{"doc":"Sphinx Handler Behavior","ref":"Noizu.DomainObject.SearchIndexHandler.html#__noizu_sphinx_handler__/2","title":"Noizu.DomainObject.SearchIndexHandler.__noizu_sphinx_handler__/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour","type":"behaviour"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html#c:__search_clauses__/6","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour.__search_clauses__/6","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html#c:__sphinx_bits__/3","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour.__sphinx_bits__/3","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html#c:__sphinx_default__/3","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour.__sphinx_default__/3","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html#c:__sphinx_encoded__/4","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour.__sphinx_encoded__/4","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html#c:__sphinx_encoding__/3","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour.__sphinx_encoding__/3","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html#c:__sphinx_expand_field__/3","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour.__sphinx_expand_field__/3","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html#c:__sphinx_field__/0","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour.__sphinx_field__/0","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html#c:__sphinx_has_default__/3","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour.__sphinx_has_default__/3","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html#c:has_query_permission?/5","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.SearchIndexHandler.Behaviour.html#t:sphinx_encoding/0","title":"Noizu.DomainObject.SearchIndexHandler.Behaviour.sphinx_encoding/0","type":"type"},{"doc":"The Noizu.DomainObject.String.IdentifierType module implements the Noizu.DomainObject.IdentifierTypeBehaviour behaviour for string identifier types used in the Noizu.DomainObject framework. This module provides functions for validating, encoding, and decoding string identifier values. Callbacks type/0 : Returns the type of the identifier. __valid_identifier__/2 : Checks if a provided value is correct for the identifier type. __sref_section_regex__/1 : Prepares a regex snippet for matching the identifier. __id_to_string__/2 : Encodes a valid identifier into a string for sref encoding. __string_to_id__/2 : Decodes a string into the identifier type.","ref":"Noizu.DomainObject.String.IdentifierType.html","title":"Noizu.DomainObject.String.IdentifierType","type":"module"},{"doc":"Encodes a valid identifier into a string for sref encoding. Params identifier: The valid identifier value to encode. _c: Additional configuration for the identifier (unused). Returns : If the identifier is encoded successfully. : If there is an error encoding the identifier, with the reason for the failure.","ref":"Noizu.DomainObject.String.IdentifierType.html#__id_to_string__/2","title":"Noizu.DomainObject.String.IdentifierType.__id_to_string__/2","type":"function"},{"doc":"Prepares a regex snippet for matching the identifier. Params _c: Additional configuration for the identifier (unused). Returns : If the regex snippet is prepared successfully. : If there is an error preparing the regex snippet, with the reason for the failure.","ref":"Noizu.DomainObject.String.IdentifierType.html#__sref_section_regex__/1","title":"Noizu.DomainObject.String.IdentifierType.__sref_section_regex__/1","type":"function"},{"doc":"Decodes a string into the identifier type. Params identifier: The string to decode into the identifier type. _c: Additional configuration for the identifier (unused). Returns : If the string is decoded successfully into the identifier type. : If there is an error decoding the string, with the reason for the failure.","ref":"Noizu.DomainObject.String.IdentifierType.html#__string_to_id__/2","title":"Noizu.DomainObject.String.IdentifierType.__string_to_id__/2","type":"function"},{"doc":"Checks if the provided value is correct for the identifier type. Params identifier: The identifier value to check. _c: Additional configuration for the identifier (unused). Returns :ok: If the identifier value is correct. : If the identifier value is incorrect, with the reason for the failure.","ref":"Noizu.DomainObject.String.IdentifierType.html#__valid_identifier__/2","title":"Noizu.DomainObject.String.IdentifierType.__valid_identifier__/2","type":"function"},{"doc":"Returns the type of the identifier as :string.","ref":"Noizu.DomainObject.String.IdentifierType.html#type/0","title":"Noizu.DomainObject.String.IdentifierType.type/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#__sphinx_bits__/3","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#__sphinx_default__/3","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#__sphinx_encoded__/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#__sphinx_encoding__/3","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#__sphinx_expand_field__/3","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#__sphinx_field__/0","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#__sphinx_has_default__/3","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.__sphinx_has_default__/3","type":"function"},{"doc":"Format instance of type for Inspect output. - strip fields, simplify object, etc.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#__strip_inspect__/3","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.__strip_inspect__/3","type":"function"},{"doc":"Cast database record fields back into entity.field of this type. For example to reconstruct a TimeStamp entity by grabbing the RDMS table's created_on, modified_on, deleted_on fields.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#cast/6","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.cast/6","type":"function"},{"doc":"Determine if two instances of this type match. Possibly ignoring erroneous fields such as time stamps/transient fields, etc.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#compare/2","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.compare/2","type":"function"},{"doc":"Cast database record fields to database format.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#dump/7","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.dump/7","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.TypeHandler.Behaviour.from_json/5 .","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#from_json/5","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.from_json/5","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#has_query_permission?/5","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.has_query_permission?/5","type":"function"},{"doc":"post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#post_create_callback/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.post_create_callback/4","type":"function"},{"doc":"(Dirty) post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#post_create_callback!/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.post_create_callback!/4","type":"function"},{"doc":"post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#post_delete_callback/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.post_delete_callback/4","type":"function"},{"doc":"(Dirty) post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#post_delete_callback!/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.post_delete_callback!/4","type":"function"},{"doc":"Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#post_get_callback/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.post_get_callback/4","type":"function"},{"doc":"(Dirty) Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#post_get_callback!/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.post_get_callback!/4","type":"function"},{"doc":"post update callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#post_update_callback/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.post_update_callback/4","type":"function"},{"doc":"(Dirty) post update callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#post_update_callback!/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.post_update_callback!/4","type":"function"},{"doc":"pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#pre_create_callback/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.pre_create_callback/4","type":"function"},{"doc":"(Dirty) pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#pre_create_callback!/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.pre_create_callback!/4","type":"function"},{"doc":"pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#pre_delete_callback/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.pre_delete_callback/4","type":"function"},{"doc":"(Dirty) pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#pre_delete_callback!/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.pre_delete_callback!/4","type":"function"},{"doc":"pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#pre_update_callback/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.pre_update_callback/4","type":"function"},{"doc":"(Dirty) pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#pre_update_callback!/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.pre_update_callback!/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#sync/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.sync/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#sync!/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.sync!/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.html#to_json/6","title":"Noizu.DomainObject.TimeStamp.Millisecond.TypeHandler.to_json/6","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#__sphinx_bits__/3","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#__sphinx_default__/3","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#__sphinx_encoded__/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#__sphinx_encoding__/3","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#__sphinx_expand_field__/3","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#__sphinx_field__/0","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#__sphinx_has_default__/3","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.__sphinx_has_default__/3","type":"function"},{"doc":"Format instance of type for Inspect output. - strip fields, simplify object, etc.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#__strip_inspect__/3","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.__strip_inspect__/3","type":"function"},{"doc":"Cast database record fields back into entity.field of this type. For example to reconstruct a TimeStamp entity by grabbing the RDMS table's created_on, modified_on, deleted_on fields.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#cast/6","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.cast/6","type":"function"},{"doc":"Determine if two instances of this type match. Possibly ignoring erroneous fields such as time stamps/transient fields, etc.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#compare/2","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.compare/2","type":"function"},{"doc":"Cast database record fields to database format.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#dump/7","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.dump/7","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.TypeHandler.Behaviour.from_json/5 .","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#from_json/5","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.from_json/5","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#has_query_permission?/5","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.has_query_permission?/5","type":"function"},{"doc":"post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#post_create_callback/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.post_create_callback/4","type":"function"},{"doc":"(Dirty) post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#post_create_callback!/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.post_create_callback!/4","type":"function"},{"doc":"post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#post_delete_callback/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.post_delete_callback/4","type":"function"},{"doc":"(Dirty) post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#post_delete_callback!/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.post_delete_callback!/4","type":"function"},{"doc":"Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#post_get_callback/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.post_get_callback/4","type":"function"},{"doc":"(Dirty) Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#post_get_callback!/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.post_get_callback!/4","type":"function"},{"doc":"post update callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#post_update_callback/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.post_update_callback/4","type":"function"},{"doc":"(Dirty) post update callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#post_update_callback!/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.post_update_callback!/4","type":"function"},{"doc":"pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#pre_create_callback/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.pre_create_callback/4","type":"function"},{"doc":"(Dirty) pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#pre_create_callback!/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.pre_create_callback!/4","type":"function"},{"doc":"pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#pre_delete_callback/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.pre_delete_callback/4","type":"function"},{"doc":"(Dirty) pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#pre_delete_callback!/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.pre_delete_callback!/4","type":"function"},{"doc":"pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#pre_update_callback/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.pre_update_callback/4","type":"function"},{"doc":"(Dirty) pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#pre_update_callback!/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.pre_update_callback!/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#sync/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.sync/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#sync!/4","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.sync!/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.html#to_json/6","title":"Noizu.DomainObject.TimeStamp.Second.TypeHandler.to_json/6","type":"function"},{"doc":"Field Type Handler to assist mapping entity fields into and out of different persistence layer formats, and to deal with persistence for fields which are nested fields in our DomainObject.Entity but are written to their own tables in RDMS or even Mnesia format, or which generate additional indexing artifacts during creation/updates. For example an Entity.time_stamp field should expand out to [{created_on, DateTime.to_unix(timestamp.created)}, ...] when writing to Mnesia for example to support date time unix epoch index columns. % Mnesia.Table { identifier : identifier , created_on : unix_time_stamp , entity : % MyEntity { time_stamp : %{ created_on : DateTime . t } } }","ref":"Noizu.DomainObject.TypeHandler.html","title":"Noizu.DomainObject.TypeHandler","type":"module"},{"doc":"","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html","title":"Noizu.DomainObject.TypeHandler.Behaviour","type":"behaviour"},{"doc":"Format instance of type for Inspect output. - strip fields, simplify object, etc.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:__strip_inspect__/3","title":"Noizu.DomainObject.TypeHandler.Behaviour.__strip_inspect__/3","type":"callback"},{"doc":"Cast database record fields back into entity.field of this type. For example, to reconstruct a TimeStamp entity by grabbing the RDMS table's created_on, modified_on, deleted_on fields.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:cast/6","title":"Noizu.DomainObject.TypeHandler.Behaviour.cast/6","type":"callback"},{"doc":"Determine if two instances of this type match. Possibly ignoring erroneous fields such as time stamps/transient fields, etc.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:compare/2","title":"Noizu.DomainObject.TypeHandler.Behaviour.compare/2","type":"callback"},{"doc":"Cast database record fields to database/persistence format.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:dump/7","title":"Noizu.DomainObject.TypeHandler.Behaviour.dump/7","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:from_json/5","title":"Noizu.DomainObject.TypeHandler.Behaviour.from_json/5","type":"callback"},{"doc":"Post create callback. Post entity creation callback. If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:post_create_callback/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.post_create_callback/4","type":"callback"},{"doc":"(Dirty) Post create callback. Post entity creation callback. If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:post_create_callback!/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.post_create_callback!/4","type":"callback"},{"doc":"Post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:post_delete_callback/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.post_delete_callback/4","type":"callback"},{"doc":"(Dirty) Post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:post_delete_callback!/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.post_delete_callback!/4","type":"callback"},{"doc":"Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:post_get_callback/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.post_get_callback/4","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:post_get_callback!/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.post_get_callback!/4","type":"callback"},{"doc":"Post update callback for entity fields of this type.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:post_update_callback/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.post_update_callback/4","type":"callback"},{"doc":"(Dirty) Post update callback for entity fields of this type.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:post_update_callback!/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.post_update_callback!/4","type":"callback"},{"doc":"Pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:pre_create_callback/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.pre_create_callback/4","type":"callback"},{"doc":"(Dirty) Pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:pre_create_callback!/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.pre_create_callback!/4","type":"callback"},{"doc":"Pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:pre_delete_callback/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.pre_delete_callback/4","type":"callback"},{"doc":"(Dirty) Pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:pre_delete_callback!/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.pre_delete_callback!/4","type":"callback"},{"doc":"Pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:pre_update_callback/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.pre_update_callback/4","type":"callback"},{"doc":"(Dirty) Pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:pre_update_callback!/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.pre_update_callback!/4","type":"callback"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:sync/3","title":"Noizu.DomainObject.TypeHandler.Behaviour.sync/3","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:sync/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.sync/4","type":"callback"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:sync!/3","title":"Noizu.DomainObject.TypeHandler.Behaviour.sync!/3","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.TypeHandler.Behaviour.html#c:sync!/4","title":"Noizu.DomainObject.TypeHandler.Behaviour.sync!/4","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.UUID.IdentifierType.html","title":"Noizu.DomainObject.UUID.IdentifierType","type":"module"},{"doc":"Encodes a UUID identifier into a string. Params identifier: The UUID identifier value to encode. _c: Additional configuration for the identifier (not used). Returns : If the identifier is encoded successfully. : If there is an error encoding the identifier, with the reason for the failure.","ref":"Noizu.DomainObject.UUID.IdentifierType.html#__id_to_string__/2","title":"Noizu.DomainObject.UUID.IdentifierType.__id_to_string__/2","type":"function"},{"doc":"Prepares a regex snippet for matching UUIDs. Params _c: Additional configuration for the identifier (not used). Returns : If the regex snippet is prepared successfully. : If there is an error preparing the regex snippet, with the reason for the failure.","ref":"Noizu.DomainObject.UUID.IdentifierType.html#__sref_section_regex__/1","title":"Noizu.DomainObject.UUID.IdentifierType.__sref_section_regex__/1","type":"function"},{"doc":"Decodes a string into a UUID identifier. Params identifier: The string to decode into the UUID identifier. _c: Additional configuration for the identifier (not used). Returns : If the string is decoded successfully into the UUID identifier. : If there is an error decoding the string, with the reason for the failure.","ref":"Noizu.DomainObject.UUID.IdentifierType.html#__string_to_id__/2","title":"Noizu.DomainObject.UUID.IdentifierType.__string_to_id__/2","type":"function"},{"doc":"Checks if the provided value is a valid UUID. Params identifier: The UUID identifier value to check. _c: Additional configuration for the identifier (not used). Returns :ok: If the identifier value is a valid UUID. : If the identifier value is not a valid UUID, with the reason for the failure.","ref":"Noizu.DomainObject.UUID.IdentifierType.html#__valid_identifier__/2","title":"Noizu.DomainObject.UUID.IdentifierType.__valid_identifier__/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalLink.html","title":"Noizu.DomainObject.UUID.UniversalLink","type":"module"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler","type":"module"},{"doc":"Integer bitwidth for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#__sphinx_bits__/3","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.__sphinx_bits__/3","type":"function"},{"doc":"Default value for (Sub)field. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#__sphinx_default__/3","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.__sphinx_default__/3","type":"function"},{"doc":"Cast (sub)field to format understood by sphinx. E.g. convert Enum atoms to their numeric value. Replace refs/entities with their universal numeric id If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#__sphinx_encoded__/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.__sphinx_encoded__/4","type":"function"},{"doc":"(Sub)field sphinx field type: :attr bigint, :attr uint, :attr_multi_64, etc. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our __sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#__sphinx_encoding__/3","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.__sphinx_encoding__/3","type":"function"},{"doc":"Expand field from DomainObject.Entity into the list of index fields needed by sphinx. E.g. best_friend_name: %{first: f, last: l} could map to [best_friend_name_first, best_friend_name_last, best_friend_name_full] to allow searching our index for best friend by first name, last name or full name.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#__sphinx_expand_field__/3","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.__sphinx_expand_field__/3","type":"function"},{"doc":"is this module a sphinx_field handler?","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#__sphinx_field__/0","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.__sphinx_field__/0","type":"function"},{"doc":"Does this (sub)field have a default value?. If we break a DomainObject.Entity field into multiple sub fields for sphinx we may inspect the per subfield indexing attribute here. For example if a field expands to subfields in our sphinx_expand_field method we may inject a :sub attribute in that method specifying the name of each specific subfield. [{:&quot;\#{field}_my_sub_field&quot;, @handler, put_in(indexing, [:sub], :my_sub_field)}]","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#__sphinx_has_default__/3","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.__sphinx_has_default__/3","type":"function"},{"doc":"Format instance of type for Inspect output. - strip fields, simplify object, etc.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#__strip_inspect__/3","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.__strip_inspect__/3","type":"function"},{"doc":"Cast database record fields back into entity.field of this type. For example to reconstruct a TimeStamp entity by grabbing the RDMS table's created_on, modified_on, deleted_on fields.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#cast/6","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.cast/6","type":"function"},{"doc":"Determine if two instances of this type match. Possibly ignoring erroneous fields such as time stamps/transient fields, etc.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#compare/2","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.compare/2","type":"function"},{"doc":"Cast database record fields to database format.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#dump/7","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.dump/7","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.TypeHandler.Behaviour.from_json/5 .","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#from_json/5","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.from_json/5","type":"function"},{"doc":"Callback implementation for Noizu.DomainObject.SearchIndexHandler.Behaviour.has_query_permission?/5 .","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#has_query_permission?/5","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.has_query_permission?/5","type":"function"},{"doc":"post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#post_create_callback/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.post_create_callback/4","type":"function"},{"doc":"(Dirty) post create callback. Post entity creation callback . If, for example, we wish to save this field to its own tables after creating the records for the entity containing this field","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#post_create_callback!/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.post_create_callback!/4","type":"function"},{"doc":"post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#post_delete_callback/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.post_delete_callback/4","type":"function"},{"doc":"(Dirty) post delete callback for entity fields of this type.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#post_delete_callback!/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.post_delete_callback!/4","type":"function"},{"doc":"Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#post_get_callback/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.post_get_callback/4","type":"function"},{"doc":"(Dirty) Post get callback, to allow, for example, injecting data into a transient field or running additional queries needed to populate a domain object entity field.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#post_get_callback!/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.post_get_callback!/4","type":"function"},{"doc":"post update callback for entity fields of this type.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#post_update_callback/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.post_update_callback/4","type":"function"},{"doc":"(Dirty) post update callback for entity fields of this type.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#post_update_callback!/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.post_update_callback!/4","type":"function"},{"doc":"pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#pre_create_callback/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.pre_create_callback/4","type":"function"},{"doc":"(Dirty) pre create callback. Users may have provided a simplified representation of this type, that we need to expand into the correct type and or possibly expand and write to the database before proceeding to create the entity that contains this field.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#pre_create_callback!/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.pre_create_callback!/4","type":"function"},{"doc":"pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#pre_delete_callback/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.pre_delete_callback/4","type":"function"},{"doc":"(Dirty) pre delete callback for entity fields of this type.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#pre_delete_callback!/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.pre_delete_callback!/4","type":"function"},{"doc":"pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#pre_update_callback/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.pre_update_callback/4","type":"function"},{"doc":"(Dirty) pre update callback for entity fields of this type.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#pre_update_callback!/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.pre_update_callback!/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#sync/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.sync/4","type":"function"},{"doc":"Merge existing and updated instance of type.","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#sync!/4","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.sync!/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.html#to_json/6","title":"Noizu.DomainObject.UUID.UniversalLink.TypeHandler.to_json/6","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html","title":"Noizu.DomainObject.UUID.UniversalReference","type":"module"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#ecto_identifier/1","title":"Noizu.DomainObject.UUID.UniversalReference.ecto_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#encode/1","title":"Noizu.DomainObject.UUID.UniversalReference.encode/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#entity/2","title":"Noizu.DomainObject.UUID.UniversalReference.entity/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#entity!/2","title":"Noizu.DomainObject.UUID.UniversalReference.entity!/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#entity_ok/2","title":"Noizu.DomainObject.UUID.UniversalReference.entity_ok/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#entity_ok!/2","title":"Noizu.DomainObject.UUID.UniversalReference.entity_ok!/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#erp_handler/0","title":"Noizu.DomainObject.UUID.UniversalReference.erp_handler/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#id/1","title":"Noizu.DomainObject.UUID.UniversalReference.id/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#id_ok/1","title":"Noizu.DomainObject.UUID.UniversalReference.id_ok/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#index_identifier/1","title":"Noizu.DomainObject.UUID.UniversalReference.index_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#lookup/1","title":"Noizu.DomainObject.UUID.UniversalReference.lookup/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#mysql_entity?/0","title":"Noizu.DomainObject.UUID.UniversalReference.mysql_entity?/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#record/2","title":"Noizu.DomainObject.UUID.UniversalReference.record/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#record!/2","title":"Noizu.DomainObject.UUID.UniversalReference.record!/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#ref/1","title":"Noizu.DomainObject.UUID.UniversalReference.ref/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#ref_ok/1","title":"Noizu.DomainObject.UUID.UniversalReference.ref_ok/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#resolve/1","title":"Noizu.DomainObject.UUID.UniversalReference.resolve/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#source/1","title":"Noizu.DomainObject.UUID.UniversalReference.source/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#sref/1","title":"Noizu.DomainObject.UUID.UniversalReference.sref/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#sref_ok/1","title":"Noizu.DomainObject.UUID.UniversalReference.sref_ok/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#universal_identifier/1","title":"Noizu.DomainObject.UUID.UniversalReference.universal_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.html#t:t/0","title":"Noizu.DomainObject.UUID.UniversalReference.t/0","type":"type"},{"doc":"Ecto ENUM Custom Type.","ref":"Noizu.DomainObject.UUID.UniversalReference.Type.html","title":"Noizu.DomainObject.UUID.UniversalReference.Type","type":"module"},{"doc":"Casts to Ref.","ref":"Noizu.DomainObject.UUID.UniversalReference.Type.html#cast/1","title":"Noizu.DomainObject.UUID.UniversalReference.Type.cast/1","type":"function"},{"doc":"Same as cast/1 but raises Ecto.CastError on invalid arguments.","ref":"Noizu.DomainObject.UUID.UniversalReference.Type.html#cast!/1","title":"Noizu.DomainObject.UUID.UniversalReference.Type.cast!/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UUID.UniversalReference.Type.html#dump!/1","title":"Noizu.DomainObject.UUID.UniversalReference.Type.dump!/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"Noizu.DomainObject.UUID.UniversalReference.Type.html#embed_as/1","title":"Noizu.DomainObject.UUID.UniversalReference.Type.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"Noizu.DomainObject.UUID.UniversalReference.Type.html#equal?/2","title":"Noizu.DomainObject.UUID.UniversalReference.Type.equal?/2","type":"function"},{"doc":"Callback implementation for Ecto.Type.load/1 .","ref":"Noizu.DomainObject.UUID.UniversalReference.Type.html#load/1","title":"Noizu.DomainObject.UUID.UniversalReference.Type.load/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UniversalLookup.html","title":"Noizu.DomainObject.UniversalLookup","type":"module"},{"doc":"","ref":"Noizu.DomainObject.UniversalLookup.html#lookup/1","title":"Noizu.DomainObject.UniversalLookup.lookup/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UniversalLookup.html#register/2","title":"Noizu.DomainObject.UniversalLookup.register/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UniversalLookup.html#reverse_lookup/1","title":"Noizu.DomainObject.UniversalLookup.reverse_lookup/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UniversalLookupBehaviour.html","title":"Noizu.DomainObject.UniversalLookupBehaviour","type":"behaviour"},{"doc":"","ref":"Noizu.DomainObject.UniversalLookupBehaviour.html#c:lookup/1","title":"Noizu.DomainObject.UniversalLookupBehaviour.lookup/1","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.UniversalLookupBehaviour.html#c:reverse_lookup/1","title":"Noizu.DomainObject.UniversalLookupBehaviour.reverse_lookup/1","type":"callback"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html","title":"Noizu.DomainObject.UnsupportedModule","type":"module"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#as_record/2","title":"Noizu.DomainObject.UnsupportedModule.as_record/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#compress/1","title":"Noizu.DomainObject.UnsupportedModule.compress/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#compress/2","title":"Noizu.DomainObject.UnsupportedModule.compress/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#entity/2","title":"Noizu.DomainObject.UnsupportedModule.entity/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#entity!/2","title":"Noizu.DomainObject.UnsupportedModule.entity!/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#entity_ok/2","title":"Noizu.DomainObject.UnsupportedModule.entity_ok/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#entity_ok!/2","title":"Noizu.DomainObject.UnsupportedModule.entity_ok!/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#expand/1","title":"Noizu.DomainObject.UnsupportedModule.expand/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#expand/2","title":"Noizu.DomainObject.UnsupportedModule.expand/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#from_json/2","title":"Noizu.DomainObject.UnsupportedModule.from_json/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#has_permission/4","title":"Noizu.DomainObject.UnsupportedModule.has_permission/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#has_permission!/4","title":"Noizu.DomainObject.UnsupportedModule.has_permission!/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#id/1","title":"Noizu.DomainObject.UnsupportedModule.id/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#id_ok/1","title":"Noizu.DomainObject.UnsupportedModule.id_ok/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#record/2","title":"Noizu.DomainObject.UnsupportedModule.record/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#record!/2","title":"Noizu.DomainObject.UnsupportedModule.record!/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#ref/1","title":"Noizu.DomainObject.UnsupportedModule.ref/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#ref_ok/1","title":"Noizu.DomainObject.UnsupportedModule.ref_ok/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#repo/0","title":"Noizu.DomainObject.UnsupportedModule.repo/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#sref/1","title":"Noizu.DomainObject.UnsupportedModule.sref/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#sref_module/0","title":"Noizu.DomainObject.UnsupportedModule.sref_module/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#sref_ok/1","title":"Noizu.DomainObject.UnsupportedModule.sref_ok/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.UnsupportedModule.html#t:t/0","title":"Noizu.DomainObject.UnsupportedModule.t/0","type":"type"},{"doc":"","ref":"Noizu.DomainObject.html","title":"Noizu.DomainObject","type":"module"},{"doc":"Setup Base Domain Object, this struct will in turn hold Entity, Repo, Index, etc. See Noizu.AdvancedScaffolding.Internal.Core.Base.Behaviour Noizu.AdvancedScaffolding.Internal.Persistence.Base.Behaviour Noizu.AdvancedScaffolding.Internal.EntityIndex.Base.Behaviour Noizu.AdvancedScaffolding.Internal.Json.Base.Behaviour Example defmodule User do use Noizu.DomainObject Noizu.DomainObject . noizu_entity ( ) do public_field :name end end","ref":"Noizu.DomainObject.html#__using__/1","title":"Noizu.DomainObject.__using__/1","type":"macro"},{"doc":"Initialize a DomainObject.Entity. Caller passes in identifier and field definitions which are in turn used to generate the domain object entity's configuration options and defstruct statement. See Noizu.AdvancedScaffolding.Internal.Core.Entity.Behaviour Noizu.AdvancedScaffolding.Internal.Persistence.Entity.Behaviour Noizu.AdvancedScaffolding.Internal.EntityIndex.Entity.Behaviour Noizu.AdvancedScaffolding.Internal.Index.Behaviour Noizu.AdvancedScaffolding.Internal.Json.Entity.Behaviour Example defmodule User do use Noizu.DomainObject Noizu.DomainObject . noizu_entity ( ) do public_field :name end end","ref":"Noizu.DomainObject.html#noizu_entity/2","title":"Noizu.DomainObject.noizu_entity/2","type":"macro"},{"doc":"Provides scaffolding for a DomainObject.Repo module. If used with no options this behavior wll provide everything needed for basic crud. get/cache/update/delete as well as providing by default a simple repo structure %Repo{ entities: [], length: 0} which may be used to pass round specific sets of records or as an embed option for domain objects provided ta TypeHandler and optional SphinxHandler is provided. Example defmodule MyApp.MyDomainObject do ... defmodule Repo do Noizu.DomainObject . noizu_repo do end end defmodule Repo.TypeHandler do require Noizu.DomainObject Noizu.DomainObject . noizu_type_handler ( ) end def pre_create_callback ( field , entity , context , options ) do # a domain object included a Repo set of entities of type MyApp.DomainObject.Entity. From this callback we may write each of these to a 12m table for our entity. super ( field , entity , context , options ) end end","ref":"Noizu.DomainObject.html#noizu_repo/2","title":"Noizu.DomainObject.noizu_repo/2","type":"macro"},{"doc":"Configure your DomainObject Schema module. Provides runtime compiled list of modules, sref mapping/Noizu.ERP String.t support, etc.","ref":"Noizu.DomainObject.html#noizu_schema_info/2","title":"Noizu.DomainObject.noizu_schema_info/2","type":"macro"},{"doc":"Similar to type handler, but responsible for casting fields to a sphinx index record. In addition the field expansion support like in our type handler behaviour it also provides default values, field type (:attr_unit, :attr_multi_64, :field), and bit width (for int fields).","ref":"Noizu.DomainObject.html#noizu_sphinx_handler/1","title":"Noizu.DomainObject.noizu_sphinx_handler/1","type":"macro"},{"doc":"Inject Scaffolding fields into a Ecto.Table entity.","ref":"Noizu.DomainObject.html#noizu_table/1","title":"Noizu.DomainObject.noizu_table/1","type":"macro"},{"doc":"Type Handler Behavior. Used for casting/loading embedded fields into their persistence layer format. For example domain objects may include a TimeStamp field. defmodule Entity do @universal_identifier true Noizu.DomainObject . noizu_entity do @index true public_field :my_image_update , nil , Noizu.Scaffolding.V3.TimeStamp.TypeHandler end end Where the time stamp field contains a created_on, modified_on, deleted_on field. When casting to an Ecto database the nested structure can be replaced with my_image_update_created_on , my_image_update_modified_on ,and my_image_update_deleted_on which would match DateTime fields in our Ecto Table schema. defmodule Noizu.DomainObject.TimeStamp.Second do use Noizu.SimpleObject @vsn 1.0 Noizu.SimpleObject . noizu_struct ( ) do date_time_handler = Application . get_env ( :noizu_advanced_scaffolding , :data_time_handler , Noizu.DomainObject.DateTime.Second.TypeHandler ) public_field :created_on , nil , date_time_handler public_field :modified_on , nil , date_time_handler public_field :deleted_on , nil , date_time_handler end #...","ref":"Noizu.DomainObject.html#noizu_type_handler/1","title":"Noizu.DomainObject.noizu_type_handler/1","type":"macro"},{"doc":"","ref":"Noizu.SimpleObject.html","title":"Noizu.SimpleObject","type":"module"},{"doc":"Begin configuring a Simple Object. @example defmodule Container do use Noizu.SimpleObject Noizu.SimpleObject.noizu_struct() do public_field :contents end end","ref":"Noizu.SimpleObject.html#__using__/1","title":"Noizu.SimpleObject.__using__/1","type":"macro"},{"doc":"Define simple object fields/settings. @example defmodule Container do use Noizu.SimpleObject Noizu.SimpleObject.noizu_struct() do public_field :contents end end","ref":"Noizu.SimpleObject.html#noizu_struct/2","title":"Noizu.SimpleObject.noizu_struct/2","type":"macro"},{"doc":"","ref":"Noizu.DomainObject.DateTime.html","title":"Noizu.DomainObject.DateTime","type":"module"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html","title":"Noizu.DomainObject.TimeStamp.Millisecond","type":"module"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html#compare/3","title":"Noizu.DomainObject.TimeStamp.Millisecond.compare/3","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html#ecto_entity?/0","title":"Noizu.DomainObject.TimeStamp.Millisecond.ecto_entity?/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html#ecto_identifier/1","title":"Noizu.DomainObject.TimeStamp.Millisecond.ecto_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html#import/4","title":"Noizu.DomainObject.TimeStamp.Millisecond.import/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html#index_identifier/1","title":"Noizu.DomainObject.TimeStamp.Millisecond.index_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html#new/2","title":"Noizu.DomainObject.TimeStamp.Millisecond.new/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html#now/1","title":"Noizu.DomainObject.TimeStamp.Millisecond.now/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html#source/1","title":"Noizu.DomainObject.TimeStamp.Millisecond.source/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html#universal_identifier/1","title":"Noizu.DomainObject.TimeStamp.Millisecond.universal_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Millisecond.html#vsn/0","title":"Noizu.DomainObject.TimeStamp.Millisecond.vsn/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html","title":"Noizu.DomainObject.TimeStamp.Second","type":"module"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html#compare/3","title":"Noizu.DomainObject.TimeStamp.Second.compare/3","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html#ecto_entity?/0","title":"Noizu.DomainObject.TimeStamp.Second.ecto_entity?/0","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html#ecto_identifier/1","title":"Noizu.DomainObject.TimeStamp.Second.ecto_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html#import/4","title":"Noizu.DomainObject.TimeStamp.Second.import/4","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html#index_identifier/1","title":"Noizu.DomainObject.TimeStamp.Second.index_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html#new/2","title":"Noizu.DomainObject.TimeStamp.Second.new/2","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html#now/1","title":"Noizu.DomainObject.TimeStamp.Second.now/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html#source/1","title":"Noizu.DomainObject.TimeStamp.Second.source/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html#universal_identifier/1","title":"Noizu.DomainObject.TimeStamp.Second.universal_identifier/1","type":"function"},{"doc":"","ref":"Noizu.DomainObject.TimeStamp.Second.html#vsn/0","title":"Noizu.DomainObject.TimeStamp.Second.vsn/0","type":"function"},{"doc":"","ref":"Noizu.EctoEntity.Protocol.html","title":"Noizu.EctoEntity.Protocol","type":"protocol"},{"doc":"","ref":"Noizu.EctoEntity.Protocol.html#ecto_identifier/1","title":"Noizu.EctoEntity.Protocol.ecto_identifier/1","type":"function"},{"doc":"","ref":"Noizu.EctoEntity.Protocol.html#index_identifier/1","title":"Noizu.EctoEntity.Protocol.index_identifier/1","type":"function"},{"doc":"","ref":"Noizu.EctoEntity.Protocol.html#ref/1","title":"Noizu.EctoEntity.Protocol.ref/1","type":"function"},{"doc":"","ref":"Noizu.EctoEntity.Protocol.html#source/1","title":"Noizu.EctoEntity.Protocol.source/1","type":"function"},{"doc":"","ref":"Noizu.EctoEntity.Protocol.html#supported?/1","title":"Noizu.EctoEntity.Protocol.supported?/1","type":"function"},{"doc":"","ref":"Noizu.EctoEntity.Protocol.html#universal_identifier/1","title":"Noizu.EctoEntity.Protocol.universal_identifier/1","type":"function"},{"doc":"","ref":"Noizu.EctoEntity.Protocol.html#universal_reference?/1","title":"Noizu.EctoEntity.Protocol.universal_reference?/1","type":"function"},{"doc":"","ref":"Noizu.EctoEntity.Protocol.html#t:t/0","title":"Noizu.EctoEntity.Protocol.t/0","type":"type"},{"doc":"","ref":"Noizu.Entity.Protocol.html","title":"Noizu.Entity.Protocol","type":"protocol"},{"doc":"","ref":"Noizu.Entity.Protocol.html#expand!/3","title":"Noizu.Entity.Protocol.expand!/3","type":"function"},{"doc":"","ref":"Noizu.Entity.Protocol.html#t:t/0","title":"Noizu.Entity.Protocol.t/0","type":"type"},{"doc":"","ref":"Noizu.Permission.Protocol.html","title":"Noizu.Permission.Protocol","type":"protocol"},{"doc":"Check with object to determine if user has required permission","ref":"Noizu.Permission.Protocol.html#has_permission!/4","title":"Noizu.Permission.Protocol.has_permission!/4","type":"function"},{"doc":"Check with object to determine if user has required permission","ref":"Noizu.Permission.Protocol.html#has_permission?/4","title":"Noizu.Permission.Protocol.has_permission?/4","type":"function"},{"doc":"","ref":"Noizu.Permission.Protocol.html#t:t/0","title":"Noizu.Permission.Protocol.t/0","type":"type"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.html","title":"Noizu.RestrictedAccess.Protocol","type":"protocol"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.html#restricted_create/3","title":"Noizu.RestrictedAccess.Protocol.restricted_create/3","type":"function"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.html#restricted_update/4","title":"Noizu.RestrictedAccess.Protocol.restricted_update/4","type":"function"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.html#restricted_view/3","title":"Noizu.RestrictedAccess.Protocol.restricted_view/3","type":"function"},{"doc":"","ref":"Noizu.RestrictedAccess.Protocol.html#t:t/0","title":"Noizu.RestrictedAccess.Protocol.t/0","type":"type"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.html","title":"Noizu.AdvancedScaffolding.Database","type":"module"},{"doc":"Alias all the table names in the current scope and require what's needed.","ref":"Noizu.AdvancedScaffolding.Database.html#__using__/1","title":"Noizu.AdvancedScaffolding.Database.__using__/1","type":"macro"},{"doc":"Create the database, it calls .create on every defined table.","ref":"Noizu.AdvancedScaffolding.Database.html#create/1","title":"Noizu.AdvancedScaffolding.Database.create/1","type":"function"},{"doc":"Create the database, it calls .create on every defined table, raises in case of error.","ref":"Noizu.AdvancedScaffolding.Database.html#create!/1","title":"Noizu.AdvancedScaffolding.Database.create!/1","type":"function"},{"doc":"Destroy the database, it calls .destroy on every defined table.","ref":"Noizu.AdvancedScaffolding.Database.html#destroy/0","title":"Noizu.AdvancedScaffolding.Database.destroy/0","type":"function"},{"doc":"Destroy the database, it calls .destroy on every defined table, raises in case of error.","ref":"Noizu.AdvancedScaffolding.Database.html#destroy!/0","title":"Noizu.AdvancedScaffolding.Database.destroy!/0","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Database.html#metadata/0","title":"Noizu.AdvancedScaffolding.Database.metadata/0","type":"function"},{"doc":"List of atoms of the defined tables in the database.","ref":"Noizu.AdvancedScaffolding.Database.html#tables/0","title":"Noizu.AdvancedScaffolding.Database.tables/0","type":"function"},{"doc":"Wait for the database to be loaded.","ref":"Noizu.AdvancedScaffolding.Database.html#wait/1","title":"Noizu.AdvancedScaffolding.Database.wait/1","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Support.SchemaProvider.html","title":"Noizu.AdvancedScaffolding.Support.SchemaProvider","type":"module"},{"doc":"Callback implementation for Noizu.MnesiaVersioning.SchemaBehaviour.change_sets/0 .","ref":"Noizu.AdvancedScaffolding.Support.SchemaProvider.html#change_sets/0","title":"Noizu.AdvancedScaffolding.Support.SchemaProvider.change_sets/0","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Support.SchemaProvider.html#neighbors/0","title":"Noizu.AdvancedScaffolding.Support.SchemaProvider.neighbors/0","type":"function"},{"doc":"","ref":"Noizu.AdvancedScaffolding.Support.TopologyProvider.html","title":"Noizu.AdvancedScaffolding.Support.TopologyProvider","type":"module"},{"doc":"Callback implementation for Noizu.MnesiaVersioning.TopologyBehaviour.database/0 .","ref":"Noizu.AdvancedScaffolding.Support.TopologyProvider.html#database/0","title":"Noizu.AdvancedScaffolding.Support.TopologyProvider.database/0","type":"function"},{"doc":"Callback implementation for Noizu.MnesiaVersioning.TopologyBehaviour.mnesia_nodes/0 .","ref":"Noizu.AdvancedScaffolding.Support.TopologyProvider.html#mnesia_nodes/0","title":"Noizu.AdvancedScaffolding.Support.TopologyProvider.mnesia_nodes/0","type":"function"},{"doc":"This library provides some general tools to reduce some boiler plate code around working with objects, performing CRUD, auditing changes, performing basic authorization checks, and working with entity references (foreign keys). It includes various concepts previously applied to some of our private projects including blade of eternity, lacrosse alerts, and solace club.","ref":"readme.html","title":"Noizu.AdvancedScaffolding","type":"extras"},{"doc":"Api Documentation New Features Advanced Scaffolding / Annotation / Indexing / Telemetry / Json Formatting / Security / PII management.","ref":"readme.html#additional-documentation","title":"Noizu.AdvancedScaffolding - Additional Documentation","type":"extras"},{"doc":"Noizu.AdvancedScaffolding.Internal.Core.Entity.Behaviour Noizu.AdvancedScaffolding.Internal.Persistence.Entity.Behaviour Noizu.AdvancedScaffolding.Internal.EntityIndex.Entity.Behaviour Noizu.AdvancedScaffolding.Internal.Index.Behaviour Noizu.AdvancedScaffolding.Internal.Json.Entity.Behaviour Json Formatting Annotation Support for multiple json formatting view (mobile, admin, etc.) @json_format_group { :user_clients , [ :compact ] } @json_provider unquote ( json_provider ) defmodule Entity do Noizu.DomainObject . noizu_entity do @meta { :enum_entity , true } identifier :integer @json { :* , :expand } @json_embed { :user_clients , [ { :title , as : :name } ] } @json_embed { :verbose_mobile , [ { :title , as : :name } , { :body , as : :description } , { :editor , sref : true } , :revision ] } public_field :description , nil , type : Noizu.VersionedString.Type @json { :* , format : :iso8601 } @json_ignore :user_clients public_field :created_on , nil , type : Noizu.DateTime.Type @json { :* , format : :iso8601 } @json_ignore [ :user_clients ] public_field :modified_on , nil , type : Noizu.DateTime.Type @json { :* , format : :iso8601 } @json_ignore [ :user_clients , :verbose_mobile ] public_field :deleted_on , nil , type : Noizu.DateTime.Type end end Support for embedding nested components inside of entity. E.g. pull CMS record details and return inline as port of entity instead of as nested objects. defmodule Entity do use Noizu.DomainObject . noizu_entity ( ) do @json { :mobile , embed : [ { description , as : :oh_hi } ] public_field :description end end a = % Entity { description : % VersionedString { identifier : 5 , description : &quot;mark&quot; , created_on : :tuesday } } # Poison.encode!(a, json_format: :mobile) { identifier : 0 , oh_hi : &quot;mark&quot; } # Poison.encode!(a, json_format: :admin) { identifier : 0 , description : %{ identifier : 5 , description : &quot;mark&quot; , created_on : :tuesday } } Content Permission Annotation and Fields Flag fields that should only be accessible by administrators, owning user, or users owner has shared with with field types and annotation. Flag PII fields automatically suppress in log output by default. defmodule Entity do @universal_identifier true Noizu.DomainObject . noizu_entity do @permissions { [ :view , :index ] , :unrestricted } identifier :integer public_field :owner @json { :* , :ignore } # don&#39;t include this field by default in json response @json { :admin_api , :include } # except for admin_api formatted calls. public_field :last_login # User (programmer) defined permission check - when attempting to access :bio check UserShare.has_permission? method to see if api caller has permission to view. @permissions :view , { :restricted , { UserShare , :has_permission? } } user_field :bio # Only users with :account_moderator permission (granted by ACL - admin group membership} can edit/set # All callers can view the account_flag field. @permissions { :* , { :has_permission : :account_moderator } } , { :view , :unrestricted } @restricted_field :account_flag # Only users who are members of the :system_account or :super_admin group may access. @permissions { :* , [ { :in_group : :system_account } , { :in_group : :super_admin } ] } @restricted_field :account_flag # Low security (level 3) personally identifiable data. Can be included in most logs and exception messages. @pii level_3 restricted_field :name , nil , Noizu.VersionedName.Type # High Security (level 0) PII. Only include in the most secure logs, strip from raised exceptions, etc. @pii :level_0 restricted_field :social_security end end # User (programmer) defined permission check. This example allows caller to view user.bio if the user # account is public or the caller is a friend with the user who the bio field belongs to. defmodule UserShare do # the caller is a friend of the user, otherwise it restricts access and the bio field will not be returned to the caller. def has_permission? ( :view , :bio , entity , context ) do user = Noizu.ERP . entity! ( entity . owner ) cond do user . public_account? -&gt; :permission_granted user . friend? ( context . caller ) -&gt; :permission_granted :else -&gt; :permission_denied end end end Built in Multiple Datastore(s) + Cache management. Scaffolding managing keeping different datastores and cache layers up to date. defmodule RootLevel.NestedLevel.Image do use Noizu.DomainObject @vsn 1.0 @sref &quot;image&quot; # Default Mnesia Database (RootLevelSchema.Database) and table. RootLevelSchema.Repo.database() &lt;&gt; &quot;NestedLevel.Image.Table&quot; @persistence_layer :mnesia # Default Ecto Database/Repo (RootLevelSchema.Repo) and table. RootLevelSchema.Repo.database() &lt;&gt; &quot;NestedLevel.Image.Table&quot; @persistence_layer { :ecto , cascade? : true , fallback_load : true } # Default Ecto Database with specific table, for example to allow lazy migration from a deprecated table @persistence_layer { :ecto , cascade? : false , fallback_load : true , table : NoizuSchema.MySQL.PreviousDatabaseTable } # don&#39;t update/delete/create in legacy MSSQL database during crud operations. {cascade?: false} # allow load from mssql if entity not found in :mnesia or :ecto (MySQL) @persistence_layer { NoizuSchema.MSSQLRepo , cascade? : false , fallback_load : true } # call archive provider on_delete hook when deleted entity, allows archive implementation to save entry to archive storage. @persistence_layer { :archive , cascade_delete? : true } # call archive provider on_delete hook when deleted entity, allows archive implementation to save entry to archive storage. # Cache to redis and precache/update cascade one changes. # Don&#39;t return from Repo.create/update/delete until redis update complete (cascade_blocking: true), # automatic cache delete after 600 seconds. {ttl: 600} @persistence_layer { :redis , cascade? : true , cascade_blocking : true , ttl : 600 } defmodule Entity do @universal_identifier true Noizu.DomainObject . noizu_entity do identifier :string ecto_identifier :integer public_fields [ :description , :blur_hash , :hash , :base , :source , :base_dimensions , :external , :image_type , :file_format , :locale , :localized , :interactions ] public_fields [ :created_on , :modified_on , :deleted_on ] internal_fields [ :moderation_status , :content_flag , :sphinx_index ] end def __from_record__ ( :NoizuSchema . MSSQLRepo , % NoizuSchema.MSSQL.NestedLevel.ImageTable { } = record , context , options ) do % __MODULE__ { custom_table_to_entity_provider : record . field } end def __from_record__ ( type , record , context , options ) do # fallback to default providers. automatically injected by noizu_entity&#39;s before_compile method. super ( type , record , context , options ) end end end Sphinx Indexing Support index annotation and definitions automate search index population and formatting # Automatically apply 5.2 km anonymization to location fields, always strip pii level 1 or lower # Automatically generate Noizu.\#{Base}.Indexer module due to inline: :sphinx argument @index self : :sphinx , type : :realtime , [ defaults : [ { MyApp.Sphinx.LocationIndex , [ anonymize : 5.2 ] } ] , pii : :level_2 ] # include sensitive user data in index | runtime meta data scanning allows this index :admin_index to cover multiple entity types with out additional user configuration @index MyApp.Admin.Indexer , pii : :level_0 defmodule Entity do @universal_identifier true Noizu.DomainObject . noizu_entity do @permissions { [ :view , :index ] , :unrestricted } identifier :integer @index true restricted_field :name , nil , MyApp.VersionedName.Type # Allow custom index controls, such as allowing users with private accounts to exclude their details from search. @index { :user_defined , { MyApp.UserEntity , :index } } restricted_field :gender @index { MyApp.Admin.Indexer , as : :blob } # Include in multiple entity admin search index, embed field in json blob as admin index will not include entity specific fields like this. @index { :inline , { :user_defined , { MyApp.UserEntity , :index } } } restricted_field :orientation # use MyAppIndex.Location handler to add \#{field}_longitude, \#{field}_latitude, \#{field}_zone, and \#{field}_radius indexes for this field e.g. geo: %{longitude: 123.3, latitude: 432.0, radius: 5.2} @index MyApp.Admin.Indexer : [ with : MyAppIndex.Location ] } @index inline : [ with : { MyAppIndex.Location , anonymize : [ radius : 25 ] } ] # Anonymize location to 25 radius bubble restricted_field :geo @index true # Type Specification (MyAppSchema.Geo) will automatically trigger MyAppIndex.Location for unpacking -&gt; :home_town_longitude, :home_town_latitude, :home_town_radius ... restricted_field :home_town , nil , MyAppSchema.Geo # Todo defmodule Jety.Admin.Indexer do use Noizu.DomainObject.Sphinx.Indexer # ... end Built in Logging/Telemetry Collate-able logs, and telemetrics automatically generated as entities are edited, accessed, cached, etc. Unique Numeric Database Identifiers Table + Node section of Identifiers allow mapping of universal ids to specific entity (entity encoded in identifiers to mimic the elixir framework's {:ref, _, id} concept. Greatly simplifies sphinx index id lookup, provides benefits of GUIDs while retaining much faster 64 bit unsigned int matching.Eventually very busy tables will need to break out into UUIDs as we approach the limits of 64 bit universal identifiers. MyApp.User.Repo . generate_identifier! ( ) -&gt; 1234005001 , where 1234 is User.Entity current incrementor value for this node , 005 is a unique identifier for a User.Entity / Table , and 001 is a node / server specific identifier . # Scaffolding automatically injects UniversalIdentifierResolution{1234005001, ref: {:ref, UserEntity, 1234005001}}} entry # If User was a univeral_lookup but not universal_identifier entity it&#39;s id would be 1234, while the universal identifier would reamain 1234005001 -&gt; UniversalIdentifierResolution{1234005001, ref: {:ref, User.Entity, 1234}} Built in handling of Atom to Enum mapping when switching between RDMS and elixir. Look Up Entities automatically generate Ecto types to avoid the need to manually map back and forth between number enumerators and their associated elixir atoms.Thus we can do something like the following schema &quot;table&quot; do field status : MyApp.Status.EctoEnumType end defmodule MyApp.Status.Entity do MyApp.ElixirScaffolding . enum_table ( [ online : 0 , offline : 1 ] ) end % MySQL.Table { status : :online } |&gt; Repo . create ( ) t = Repo . get ( MySQL.Table , identifier ) if t . status == :offline , do : stuff ( ) rather than the much more verbose equivalent schema &quot;table&quot; do field status : identifier end defmodule MyApp.Status.Entity do ... @enum_to_atom %{ 0 =&gt; :online , 1 =&gt; :offline , ... } @atom_to_enum %{ online : 0 , offline : 1 , ... } def enum_to_atom ( v ) , do : @enum_to_atom [ v ] end % MySQL.Table { status : MyApp.Status.Entity . atom_to_enum ( :status ) } |&gt; Repo . create ( ) t = Repo . get ( MySQL.Table , identifier ) if MyApp.Status.Entity . enum_to_atom ( t . status ) == :offline , do : stuff ( ) Reduce Lines of Code &amp; Maintenance* Scaffolding + Annotation takes care of basic Json/Database Crud Aspect-Oriented-Programming via annotation and macros + config options allow fine tuned extensions and customization of objects. Straight forward roll out of cluster wide aop behaviors/extensions. For Example defmodule MyApp.Image.Type do @vsn 1.0 @sref &quot;image-type&quot; use MyApp.ElixirScaffolding.EnumEntity , values : [ none : 0 , profile : 1 , background : 2 , post : 3 , user_upload : 4 , logo : 5 , moment : 6 , shout_out : 7 ] end Automatically generates Image.Type.Entity Image.Type.Repo Image.Type.EctoEnumType Image.Type.EctoEnumReference MyApp.EnumEntity.Indexer # Search all entities or entities of a specific type to bring up matches for api text autocomplete Noizu.ERP.ref handlers for (Image.Type.Entity, Mysql.Image.Type.Table, Mnesia.Image.Type.Table) Name/Description Versioning - (Uses a Noizu.VersionedString that provides simple revision history of changes to fields title/description) Runtime Noizu.ERP ref string parser extension to handle &quot;ref.image-type.1234&quot; formatted reference strings. Crud Json formatting (for mobile view collapse to string %MyApp.Image.Type{1, description: %{title: &quot;User&quot;}}) -&gt; &quot;User&quot; Data setup helpers. and this line in jetzy/lib/jetzy_schema/mysql/enum_tables.ex require MyAppSchema.EnumTableBehaviour # . . . MyAppSchema.EnumTableBehaviour . table ( :image_type , Elixir.MyApp.Image.Type.Entity ) # . . . generates a MyAppSchema.MySQL.Image.Type.Table currently equivalent to: defmodule MyAppSchema.MySQL.Image.TypeTable do @primary_key { :identifier , :id , autogenerate : false } @derive { Phoenix.Param , key : :identifier } schema &quot;image_type&quot; do #field :description, MyApp.VersionedString.EctoUniversalReference # Standard Time Stamps field :created_on , :utc_datetime_usec field :modified_on , :utc_datetime_usec field :deleted_on , :utc_datetime_usec end #------------------------------- # new #------------------------------- def new ( options \\\\ %{ } ) do struct ( __MODULE__ , options ) end #------------------------------- # changeset #------------------------------- def changeset ( record , params ) do fields = Map . keys ( record ) -- [ :__struct__ , :__schema__ , :__meta__ ] record |&gt; cast ( params , fields ) |&gt; validate_required ( [ ] ) end defdelegate __entity__ ( ) , to : MyApp.Image.Type.Entity defdelegate __repo__ ( ) , to : MyApp.Image.Type.Entity defdelegate __sref__ ( ) , to : MyApp.Image.Type.Entity defdelegate __erp__ ( ) , to : MyApp.Image.Type.Entity defdelegate __persistence__ ( setting \\\\ :all ) , to : MyApp.Image.Type defdelegate __persistence__ ( selector , setting ) , to : MyApp.Image.Type defdelegate __nmid__ ( setting ) , to : MyApp.Image.Type.Entity def __schema_table__ ( ) , do : :image_type def __noizu_info__ ( :type ) , do : :enum_table defdelegate __noizu_info__ ( setting ) , to : MyApp.Image.Type end Existing","ref":"readme.html#see","title":"Noizu.AdvancedScaffolding - See","type":"extras"},{"doc":"Refs provide a universal way for database records to reference other internal or external entities. They take the form of a tuple as follows: {:ref, Entity.Module, identifier} where Entity.Module is the type of entity we are referencing and provides a method entity(nmid) that is capable of fetching the entity referenced by the listed identifier. This makes it straight forward for a table to reference various other entity types in a generic way. Additionally the Noizu.ERP (Entity Reference Protocol) provides a straight forward mechanism for handling references with out knowing in advance if they have been expanded or their exact type. The EntityReferenceProtocol (alias Noizu.ERP, as: EntityReferenceProtocol) is defined as follows: defprotocol Noizu.ERP do @doc &quot;Cast to noizu reference object&quot; def ref ( obj ) @doc &quot;Cast to noizu string reference object&quot; def sref ( obj ) @doc &quot;Convert to persistence object. Options may be passed to coordinate actions like expanding embedded references.&quot; def record ( obj , options ) @doc &quot;Convert to persistence object Options may be passed to coordinate actions like expanding embedded references. (With transaction wrapper if required)&quot; def record! ( obj , options ) @doc &quot;Convert to scaffolding.struct object. Options may be passed to coordinate actions like expanding embedded references.&quot; def entity ( obj , options ) @doc &quot;Convert to scaffolding.struct object Options may be passed to coordinate actions like expanding embedded references. (With transaction wrapper if required)&quot; def entity! ( obj , options ) end # end defprotocol Noizu.ERP Where the methods ref and sref convert any participating objects into {:ref, Module, id} and &quot;ref.module.id&quot; format respectively; record and record! expand a reference into whatever format is used for db persistence (where options gives us a hook to dynamically adjust how records are converted to, for example, insert linked records if needed); and finally, where entity/2 and entity!/2 will insure our reference is in entity (struct) format. It is up to the library user to provide the defimpls needed to handle sref format strings &quot;ref.type.identifier&quot;, along with defimpls for any structs and database classes used. Additionally it is up to the library user to ensure that their struct classes implement the Noizu.AdvancedScaffolding.EntityBehaviour and that their structs and persistence records provide defimpls of the EntityReferenceProtocl to allow their conversion into ref, sref, record and entity format.","ref":"readme.html#refs","title":"Noizu.AdvancedScaffolding - Refs","type":"extras"},{"doc":"The Noizu.AdvancedScaffolding.RepoBehaviour will automatically make auditing calls as records are accessed and modified. This makes it very straight forward (provided an AuditEngine is defined) to generate robust audits of who has modified what and when. A possible implementation may look like the following mnesia table and defimpl. Note how the mnesia table is setup to allow us to easily search by entity, request token, time, or editor. defmodule YourProject.AuditEngine do @behaviour Noizu.AdvancedScaffolding.AudingEngineBehaviour def audit ( event , details , entity , context , note \\\\ nil ) do % MnesiaDb.AuditHistory { entity : EntityReferenceProtocol . ref ( entity ) , event : event , details : details , time_stamp : DateTime . utc_now ( ) , request_token : context . token , editor : EntityReferenceProtocol . ref ( context . caller ) , reason : context . reason , note : note } |&gt; MnesiaDb.AuditHistory . write :ok end def audit! ( event , details , entity , context , note \\\\ nil ) do Amnesia.Fragment . transaction do audit ( event , details , entity , context , note ) end end end #----------------------------------------------------------------------------- # @AuditHistory #----------------------------------------------------------------------------- deftable AuditHistory , [ :entity , :event , :details , :time_stamp , :request_token , :editor , :reason , :note ] , type : :bag , index : [ :request , :time_stamp , :editor ] , fragmentation : [ number : 5 , copying : %{ disk! : 1 } ] do @moduledoc &quot;&quot;&quot; Audit History - Basic structure for an Audit History Table &quot;&quot;&quot; @type t :: % AuditHistory { entity : Types . entity_reference , # The object being modified. event : atom | tuple , # the event being audited, such as create table. details : any , # additional details about entry time_stamp : DateTime . t , # utc.now() of audit entry. request_token : String . t , # unique token that may be used to collate all audit logs related to a specific request. editor : Types . entity_reference , # who made the change. reason : String . t | nil , # calling.context reason (if any) provided when a call was made via api. note : String . t | nil , # internal note about audit entry. Created when entry was created or added by a moderator later on. } end # end deftable","ref":"readme.html#auditengine","title":"Noizu.AdvancedScaffolding - AuditEngine","type":"extras"},{"doc":"The Noizu.AdvancedScaffolding.CallingContext structure is used to pass information about API or related requests through out the system so that it is possible to confirm that a given caller is authorized to make changes, log who the caller was, apply global options to the request (such as expanding refs where found), and pass along a request token to allow admins to easily collate requests across systems. @type t :: % CallingContext { caller : tuple , token : String . t , reason : String . t , auth : Any , options : Map . t , vsn : float } It is left to the user to implement the logic needed to populate a CallingContext with these values. A sample implementation is below. alias Noizu.AdvancedScaffolding.CallingContext , as : CallingContext def default_get_context ( conn , params , opts \\\\ %{ } ) def default_get_context ( conn , params , _opts ) do token = params [ &quot;request-id&quot; ] || case ( get_resp_header ( conn , &quot;x-request-id&quot; ) ) do [ ] -&gt; CallingContext . generate_token ( ) [ h | _t ] -&gt; h end reason = params [ &quot;call-reason&quot; ] || case ( get_req_header ( conn , &quot;x-call-reason&quot; ) ) do [ ] -&gt; nil [ h | _t ] -&gt; h end expand_refs = nil # TODO - support ability for callers to request specific expansions. expand_all_refs = if params [ &quot;expand-all-refs&quot; ] == &quot;true&quot; do true else case get_req_header ( conn , &quot;x-expand-all-refs&quot; ) do [ ] -&gt; false [ h | _t ] -&gt; h == &quot;true&quot; end end options = %{ expand_refs : expand_refs , expand_all_refs : expand_all_refs } case Guardian.Plug . current_resource ( conn ) do auth = %{ &quot;identifier&quot; =&gt; user_identifier } -&gt; % CallingContext { caller : { :ref , user_identifier , SolaceBackend.Repos.UserRepo } , token : token , reason : reason , auth : auth , options : options } _ -&gt; % CallingContext { caller : unauthenticated_ref ( conn ) , token : token , reason : reason , auth : nil , options : options } end end # end get_context/3 def get_ip ( conn ) do case Plug.Conn . get_req_header ( conn , &quot;x-forwarded-for&quot; ) do [ h | _ ] -&gt; h [ ] -&gt; conn . remote_ip |&gt; Tuple . to_list |&gt; Enum . join ( &quot;.&quot; ) nil -&gt; conn . remote_ip |&gt; Tuple . to_list |&gt; Enum . join ( &quot;.&quot; ) end end # end get_ip/1 def unauthenticated_ref ( conn ) do { :ref , System.UnauthenticatedUser , get_ip ( conn ) } end # end unauthenticated_ref/1","ref":"readme.html#calling-context","title":"Noizu.AdvancedScaffolding - Calling Context","type":"extras"},{"doc":"AS an alternative to GUID based identifiers this library relies on noizu_mnesia_identifiers. Each Entity/Table is assigned a unique identifier, as well as each node. Relying on these Repos provide a nmid_generator that produces sequential identifiers (per entity/table) with the final digits taken up with the server.node identifier + table/entity identifier. def generate ( seq , _opts \\\\ nil ) do case seq . __nmid__ ( :bare ) do true -&gt; bare ( seq ) :node -&gt; bare_node ( seq ) _ -&gt; current = :mnesia . dirty_update_counter ( Noizu.AdvancedScaffolding.Database.NmidV3Generator.Table , seq , 1 ) map_id ( current , @node_key , seq . __nmid__ ( :index ) ) end end def map_id ( sequential_identifier , node_key , entity_key ) do sequential_identifier * 1_00_000 + ( rem ( node_key , 99 ) * 1_000 ) + rem ( entity_key , 999 ) end","ref":"readme.html#noizu-mnesia-identifiers-nmids","title":"Noizu.AdvancedScaffolding - Noizu Mnesia Identifiers (NMIDs)","type":"extras"},{"doc":"[wip] Fill in @doc/@modocs [*] Improve Compile Times/Reduce compile deps. (See below excerpt) [*] Tweak naming conventions/organization.] [wip] Updated Readme.MD/fine tune generated documentation. Excerpt Compile Time Enhancements: This is Google's cache of https://szajbus.dev/elixir/2020/04/14/understanding-and-fixing-recompilation-in-elixir-projects.html . It is a snapshot of the page as it appeared on 11 Jun 2021 15:09:00 GMT. The current page could have changed in the meantime. Learn more. Full versionText-only versionView source Tip: To quickly find your search term on this page, press Ctrl+F or ⌘-F (Mac) and use the find bar. Home Photo by Steve Johnson on Unsplash Understanding and fixing recompilation in Elixir projects Apr 14, 2020 on Elixir Our goal as programmers is to deliver value by writing code. It should be efficient, maintainable, but most importantly correct. Correctness can be checked at multiple stages of the development process, but the most immediate feedback we can get is from the compiler, test suite or the REPL. We rarely write large chunks of code in one go, then test it as a whole, because that means unnecessary risk of wasted effort if it turns out not to work as expected. We’d rather make small, deliberate changes, then quickly test and adjust if needed before going forward. For that however, our feedback loops must be as short as possible. We strive for fast test suites and invest time in optimizing the compilation process, because they directly affect our workflow. Slow feedback contributes to lost focus at the very least. Consider the rate of feedback as your speed limit . 1 When working with compiled languages, and Elixir is no exception here, we are destined to spend some time waiting for the compiler. And there may be times when even the smallest of changes result in recompilation of significant parts of the codebase. These situations quickly get annoying. Ever experienced this? $ touch some/project/module.ex $ mix test Running tests... Compiling 791 files (.ex) That’s a long wait before tests even run! Let’s find why and how to fix this. How compiler decides what to recompile Elixir compiler uses lexical tracker to track references to modules, function dispatches, usage of aliases, imports and requires in the code, etc. It uses this information to build project modules’ dependency graph and ultimately optimize its own work. When module changes, the compiler finds its dependants by analyzing the dependency graph and marks them as stale. Next, dependants of these are marked as stale too. The process is repeated until the whole dependency graph is traversed and all the stale modules are identified. Whether a stale module will be recompiled depends on the type of dependency it has to a module that “made” it stale. Understanding module dependencies Basically, when module A uses module B in any way, we say it depends on B. Dependencies themselves are transitive. If A depends on B and B depends on C, then by implication A depends on C too. There are three types of dependencies between Elixir modules. Compile-time dependencies Such dependecies are created when module A uses module B at compile time, for example by: requiring module B importing functions from B using macros from B delegating calls to B via defdelegate implementing behaviour B implementing protocol B When B changes, A must be recompiled too. Runtime dependencies Runtime dependencies happen when module A interacts with B only at runtime, e.g. by calling its functions (either by fully qualified name or via an alias). When B changes, A does not need to be recompiled. Struct dependencies This type of dependency is created when A uses %B{} struct. A needs to be recompiled only when the definition of %B{} struct changes, because struct keys are checked at compile time. 2 Strategy for faster recompilation Actually it’s not about the speed of the compiler, but the amount of work it has to do. The less cross-dependencies in the codebase, the less modules will need to be recompiled after something changes. The obvious strategy would be to try to reduce compile-time dependencies, but reducing runtime and struct deps is equally important. Consider following example: defmodule A do @answer B.search() def get_answer, do: @answer end defmodule B do def search, do: C.search() end defmodule C do def search do # ... end end A has a compile-time dependency on B because it calls a function from that module at compile-time (when module attributes are defined). B has only a runtime dependency on C because it calls a function from that module at runtime. A doesn’t have a direct compile-time dependency on C, but if C changes, then A must be recompiled, even though B doesn’t have to! $ touch lib/c.ex $ mix compile --verbose Compiling 2 files (.ex) Compiled lib/c.ex Compiled lib/a.ex The process is as follows: Compiler detects that C changed ( on disk ) , marks it as stale and for recompilation . Compiler sees that B depends on something stale ( C ) , so marks it as stale as well , but doesn ’ t mark it for recompilation because it ’ s only a runtime dependency . Compiler sees that A depends on something stale ( B ) , marks it as stale , but this time it ’ s a compile - time dependency , so the file is marked for recompilation too . Clearly A has an implicit compile dependency on C. It was counter-intuitive to me at first 3. It happens because the compiler assumes that A may be using C’s code at compile time indirectly (through B). This fact is going to shape our strategy when trying to avoid recompilation hell in our projects. Fixing your project In large projects, it’s not uncommon to see cycles in the dependency graph. If there happen to be a compile-time dependency between member modules of such cycle, any change will trigger a cascade-style recompilation of other modules in that cycle as well as ones depending on them and so on. That’s why even changes that appear simple on the surface, sometimes get you few hundred files to recompile… and ruined workflow. As removing cycles from the dependency graph is rarely a trivial task, it’s better to try to prevent them happening in the first place. 4 Nonetheless, there are some dependency-breaking techniques listed below that may apply to any project. As a prerequisite, get familiar with xref tool. It’s built into mix and can help you indentify super-connected modules in your project and modules that have deep subtrees of dependencies 5. Simply use mix help xref to start. There’s also a short and practical overview of the tool written by Wojtek Mach on Dashbit’s blog. Keep you library code clean There will probably be some well-connected modules in your business layer, like those in User or Account contexts. In general, business layer code is very likely to contain a lot of cross-module dependencies, even cycles. Library code on the other hand is supposed to be generic, it should not depend on any module from your business layer. Otherwise it would transfer all such dependencies to any place it’s referenced from. Here’s an example from actual project: web/i18n.ex defmodule MyApp.I18n do @moduledoc &quot;&quot;&quot; Internationalization with a gettext-based API. &quot;&quot;&quot; use Gettext, otp_app: :my_app def set_locale(%User{locale: locale}), do : Gettext . put_locale ( __MODULE__ , locale ) # … end Pattern-matching on %User{} struct creates a compile-time dependency on User module. It didn’t seem to be a big deal until we realized that it creates a lot of indirect dependencies throughout the whole project because I18n module is very widely-used. A simple change yielded a huge positive change in recompilation. def set_locale(%User{locale: locale}), def set locale(%{locale: locale}), do: Gettext.put locale(__MODULE , locale) Don’t import everything In Phoenix apps, web/router.ex builds a super-connected MyApp.Router.Helpers module. When you import it to use route helpers, you indirectly import a lot of its dependencies. To avoid that, alias it instead: import MyApp.Router.Helpers alias MyApp.Router.Helpers, as: Routes The same applies to any other well-connected module. Change defdelegate to proxy functions defdelegate defines functions via metaprogramming at compile time. Simple “proxy” functions would be runtime dependencies instead. defdelegate authorize(conn), to: Auth def authorize(conn), do: Auth.authorize(conn) Don’t define module attributes with remote functions Module attributes are defined at compile-time, if they are set by using remote functions, compile-time dependencies are created. If you don’t need to use module attributes in guards, consider functions instead. @extension_whitelist FileExt.images() defp extension_whitelist, do: FileExt.images() Use remote types in typespec Consider the example: defmodule Hello do def say(%User{username: username}), do: &quot;Hello, \#{username}&quot; def say(%Admin{name: name}), do: &quot;Hello, \#{name}&quot; end Hello uses %User{} and %Admin{} structs, so we have just struct dependencies, as shown by xref. $ mix xref graph lib/hello.ex ├── lib/admin.ex (struct) └── lib/user.ex (struct) Now let’s add a pretty standard function @spec that list these structs as accepted argument types: @spec say(%User{} | %Admin{}) :: binary() Suddenly, we get more strict compile-time deps 6. $ mix xref graph lib/hello.ex ├── lib/admin.ex (compile) └── lib/user.ex (compile) In order to fix this, we should rather define remote types and use them instead of structs. defmodule User do defstruct [:username] @type t() :: % MODULE {} end defmodule Admin do defstruct [:name] @type t() :: % MODULE {} end defmodule Hello do @spec say(User.t() | Admin.t()) :: any() def say(%User{username: username}), do: &quot;Hello, \#{username}&quot; def say(%Admin{name: name}), do: &quot;Hello, \#{name}&quot; end Summary Sometimes a quick, small change may result in removal of a crucial dependency and break a cycle in your dependency graph, yielding tangible improvements in recompilation speed. Other times, some improvements may come at the expense of code readability and understandability, and simply will not be worth it. Pay attention. The compiler, through slow recompilation, may be signalling problems in your code. It may prompt you to rethink your recent architectural decisions. Issues are generally easier and cheaper to fix when detected early and recompilation that’s slowing down is a plainly visible warning sign you probably should take seriously. D . Thomas , A . Hunt . ( 2020 ) . The Pragmatic Programmer , 20 th Anniversary Edition . Pearson Education , Inc . ↩ As of Elixir 1.6 . See Separate tracking structs from compile - time dependencies #6575 ↩ Until I received explanation from Jason Axelson . See Implicit compile - time dependencies in Elixir Forum . ↩ I personally look forward to using such tools as boundary which makes cross - module dependencies explicit . Umbrella projects can also be helpful in that aspect as they don ’ t allow cyclic dependencies between individual apps . ↩ Technically it ’ s a graph , not a tree , but xref displays it as such . ↩ I actually suspect this is a bug and plan to investigate it . ↩ Michał Szajbe's Picture Michał Szajbe I'm Senior Backend Developer at Recruitee, previously CTO at Sellektor and Co-founder at Monterail. I build things in Elixir, Ruby and Javascript. I occasionally contribute to open source. You can follow me on Twitter. Share this post Twitter Facebook Contribute If you spot a mistake or want to contribute to this page, please submit an issue or a pull request in the repository. Thank you! Michał Szajbe © 2020 • Built with Jekyll and Kasper • Subscribe","ref":"todo.html","title":"TODO","type":"extras"},{"doc":"Noizu Labs, Inc. 2021","ref":"copyright.html","title":"COPYRIGHT","type":"extras"},{"doc":"","ref":"sample_conventions_doc.html","title":"sample_conventions_doc","type":"extras"},{"doc":"The following are the current Noizu conventions and notes for Amnesia databases, repos and entity objects. Feel free to grab this document and modify for your own uses to help onboard your fellow developers on how the project works and naming conventions expected by the framework. This document has been modified from the (original)[ https://github.com/noizu/ElixirScaffolding/blob/master/markdown/sample_conventions_doc.md] Version Control We use a NoizuLabs, Inc. Amnesia friendly schema versioning tool . A versioning database Noizu.MnesiaVersioning.Database tracks which change sets have been applied. Change sets themselves (including rollback methods) are defined in lib/__your_app__/versioning/schema_provider.ex and related files. @See Noizu MnesiaVersioning for more details on using this tool. Naming Convention","ref":"sample_conventions_doc.html#amnesia-style-guide","title":"sample_conventions_doc - Amnesia Style Guide","type":"extras"},{"doc":"Database Tables should be in singular form and end in the word Table. UserTable not User or Users","ref":"sample_conventions_doc.html#entity-tables","title":"sample_conventions_doc - Entity Tables","type":"extras"},{"doc":"Logical name spacing should use a period between levels. LogicalParent.LogicalChildTable , e.g. User.ExtendedInfoTable","ref":"sample_conventions_doc.html#nesting","title":"sample_conventions_doc - Nesting","type":"extras"},{"doc":"One to One Join Tables should be in singular form with a 2 to indicate this is a join table User2PrimaryEmailTable not UsersPrimaryEmails or User.PrimaryEmail , etc. One to Many Join Tables should be in singular-plural form with a 2 to indicate join. User2EmailsTable not UsersEmails , or UserEmail Many to Many Join Tables should be in plural-plural form with a 2 to indicate join. Users2GroupsTable Nested parents can be dropped if no ambiguity will be present, nesting periods should be removed UserGroup2GroupRolesTable not User.Group2Group.RolesTable","ref":"sample_conventions_doc.html#join-tables","title":"sample_conventions_doc - Join Tables","type":"extras"},{"doc":"In general most tables should use :set or :ordered_set table type. The exception would be EAV, and Audit tables where the :bag type is preferred. The heavily leveraged Noizu ElxirScaffolding framework works best with numeric primary key based :set/:ordered_set tables. @see (Noizu ElixirScaffolding Framework)[ https://github.com/noizu/ElixirScaffolding] Coding Conventions","ref":"sample_conventions_doc.html#table-types","title":"sample_conventions_doc - Table Types","type":"extras"},{"doc":"Date time entries should be stored as the elixir native DateTime type when possible. For efficient range searches the underlying DateTime objects may be converted to Unix Epoch time stamps and or {year, month, day, hour, minute, second} tuples or a combination of both but should when possible remain as standard DateTime object in any actual entity object. E.g. % __YOUR_APP___ . Foo { identifier : 1234 , created_on : date_time_object } % __YOUR_APP___ . Database.FooTable { identifier : 1234 , created_on : foo . created_on |&gt; DateTime . to_unix ( ) , entity : foo } All Unix Epoch should be stored in UTC time. for tuples the actual time_zone should be indicated as the first param {:utc, year, month, ...}","ref":"sample_conventions_doc.html#date-time","title":"sample_conventions_doc - Date Time","type":"extras"},{"doc":"Identifier fields should be named :identifier not nmid, nmaid, id, appengine_id, etc. and when possible should be numeric to avoid the need to override default noizu elixir scaffolding behaviour.","ref":"sample_conventions_doc.html#identifiers","title":"sample_conventions_doc - Identifiers","type":"extras"},{"doc":"The Noizu ElixirScaffolding framework relies heavily on what we call Entity References. Entity references are tupples that include an indicator that this tuple is a reference, a module that can obtain an object from it's persistence layer/source and an identifier. A entity reference for a User object for example may look like {:ref, __YOUR_APP___.User, 1234} , The underlying object may then be obtained using the Noizu.EntityReferenceProtocol.entity! method. E.g. Noizu.EntityReferenceProtocol.entity!({:ref, __YOUR_APP___.User, 1234}) -&gt; %User{identifier: 1234, ...} SREF For passing data to non tuple supporting environments such as javascript and appengine the Noizu.EntityReferenceProtocol provides a sref implementation that converts refs to string format. {:ref, __YOUR_APP___.User, 1234} in sref format for example would become &quot;ref.user.1234&quot; . Behind the scenes entities provide their sref prefix user as a use argument when extending the Noizu.Scaffolding.EntityBehaviour . e.g. defmodule __YOUR_APP___ . User do use Noizu.Scaffolding.EntityBehaviour , mnesia_table : __YOUR_APP___ . Database.UserTable , sref_module : &quot;user&quot; end The Noizu.Scaffolding.EntityBehaviour behaviour provides the default sref implementation to convert objects into sref format. However to convert sref strings back into ref, entity or record format the implementer must provide a defimple of the Noizu.EntityReferenceProtocol protocol for the bitstring type. Below is one possible implementation. defimpl Noizu.ERP , for : BitString do @module_lookup ( %{ __YOUR_APP___ . User . sref_module ( ) =&gt; __YOUR_APP___ . User __YOUR_APP___ . User.Location . sref_module ( ) =&gt; __YOUR_APP___ . User.Location } ) def lookup_module ( sref_module ) do Map . get ( @module_lookup , sref_module , UnsupportedModule ) end # Note - this encoding does not support ref strings that include periods in their module ref string or identifier. def ref ( sref ) do [ &quot;ref&quot; , m_str , id_str ] = String . split ( sref , &quot;.&quot; ) m = lookup_module ( m_str ) m . ref ( id_str ) end def sref ( sref ) , do : sref def entity ( sref , options \\\\ nil ) , do : Noizu.ERP . entity ( ref ( sref ) , options ) def entity! ( sref , options \\\\ nil ) , do : Noizu.ERP . entity! ( ref ( sref ) , options ) def record ( sref , options \\\\ nil ) , do : Noizu.ERP . record ( ref ( sref ) , options ) def record! ( sref , options \\\\ nil ) , do : Noizu.ERP . record! ( ref ( sref ) , options ) end defimpl Noizu.ERP , for : UnsupportedModule do def ref ( _item ) , do : raise &quot;UnsupportedModule&quot; def sref ( _item ) , do : raise &quot;UnsupportedModule&quot; def entity ( _item , _options \\\\ nil ) , do : raise &quot;UnsupportedModule&quot; def entity! ( _item , _options \\\\ nil ) , do : raise &quot;UnsupportedModule&quot; def record ( _item , _options \\\\ nil ) , do : raise &quot;UnsupportedModule&quot; def record! ( _item , _options \\\\ nil ) , do : raise &quot;UnsupportedModule&quot; end The Noizu.EntityReferenceProtocol @see (Noizu ElixirScaffolding Framework)[ https://github.com/noizu/ElixirScaffolding] for more details. defprotocol Noizu.ERP do @doc &quot;Cast to noizu reference object&quot; def ref ( obj ) @doc &quot;Cast to noizu string reference object&quot; def sref ( obj ) @doc &quot;Convert to persistence object. Options may be passed to coordinate actions like expanding embedded references.&quot; def record ( obj , options \\\\ %{ } ) @doc &quot;Convert to persistence object Options may be passed to coordinate actions like expanding embedded references. (With transaction wrapper if required)&quot; def record! ( obj , options \\\\ %{ } ) @doc &quot;Convert to scaffolding.struct object. Options may be passed to coordinate actions like expanding embedded references.&quot; def entity ( obj , options \\\\ %{ } ) @doc &quot;Convert to scaffolding.struct object Options may be passed to coordinate actions like expanding embedded references. (With transaction wrapper if required)&quot; def entity! ( obj , options \\\\ %{ } ) end # end defprotocol Noizu.ERP External References External references (entities owned by remote apis, such as firebase for example) follow slighlty different conventions. And generally will look like {:ext_ref, InterfaceForExternalStore, external_identifier} where InterfaceForExternalStore is a module that implements the relevant Noizu.EntityReferenceProtocol methods for communicating with the remote store. Entity Reference Naming Conventionts When entities reference other entities as fields you will generally want to add a _ref suffix to those fields. If an entity has a foriegn key reference to a user record for example that field could be named user_ref or simple owner_ref . Standardized naming convention makes the like of boiler plate code maintenance and scaffolding more straight forward. @see https://github.com/noizu/elixir_scaffolding for more details.","ref":"sample_conventions_doc.html#entity-references","title":"sample_conventions_doc - Entity References","type":"extras"},{"doc":"Generally tables will include nested objects that represent the actual record type. Any fields on the mnesia table itself are generally duplicates of data inside of the nested entity, exposed for indexing. Most tables will simple contain an identifier and entity field with all actual data inside of the entity object. The primary Embedded object should be put in a field named entity: Even if a database does not require an embedded object (aka when it is very simple etc.) if should still follow this convention to make future expansion more straight forward and avoid the need for custom boilerplate scaffolding code. If absolutely necessary the deftable entry itself can implement the Noizu.Scaffolding.EntityBehaviour and EntityReferenceProtocol protocol. The main exceptions being vary large list like tables such as Audit, EAV or Join tables. @see https://github.com/noizu/elixir_scaffolding for more details.","ref":"sample_conventions_doc.html#embedded-structures","title":"sample_conventions_doc - Embedded Structures","type":"extras"},{"doc":"In a few places we use Audit and EAV tables. Although the tables and structs are different the underlying logic is generic. #----------------------------------------------------------------------------- # General Audit History Table #----------------------------------------------------------------------------- deftable AuditHistoryTable , [ :entity , :time , :editor , :reason , :event ] , type : :bag , index : [ ] , fragmentation : [ number : 10 , copying : %{ disk! : 1 } ] do @type t :: % AuditHistoryTable { entity : Types . entity_reference , time : Types . unix_epoch , editor : Types . entity_reference , reason : String . t | :nil , event : tuple # e.g. {:event_name, {:type_specific_details}} } end #----------------------------------------------------------------------------- # Sparse Matrix #----------------------------------------------------------------------------- deftable EntityAttributeValueTable , [ :entity , :attribute , :value ] , type : :bag , index : [ :attribute ] , fragmentation : [ number : 10 , copying : %{ disk! : 1 } ] do @type t :: % EntityAttributeValueTable { entity : Types . entiy_reference , attribute : atom | String . t , value : integer | atom | float | String . t | any } end We use the :bag table types for audit tables so that we may quickly insert new records, as long as we follow conventions we can easily filter for records for specific entities or users {:ref, User, identifier} etc. Likewise we can get pretty flexible with our EAV tables. For example we can put :tags all into a single MapSet % EntityAttributeValueTable { entity : { :ref , User , 1234 } , attributes : :tags , value : MapSet . new ( [ &quot;banana&quot; , &quot;apple&quot; ] ) } or in individual entries depending on how we plan on searching for records. % EntityAttributeValueTable { entity : { :ref , Users , 1234 } , attributes : :tags , value : &quot;banana&quot; } % EntityAttributeValueTable { entity : { :ref , Users , 1234 } , attributes : :tags , value : &quot;apple&quot; }","ref":"sample_conventions_doc.html#audit-tables-eav-tables","title":"sample_conventions_doc - Audit Tables &amp; EAV Tables","type":"extras"}]